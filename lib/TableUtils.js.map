{"version":3,"sources":["../src/TableUtils.js"],"names":["getSpanSize","getFormattedValue","redColorScaleGenerator","getHeatmapColors","arr","i","j","multi","valsAttrs","x","asc","end","noDraw","len","length","asc1","end1","stop","value","aggregator","formatter","format","values","min","Math","apply","max","nonRed","round","backgroundColor","tableColorScaleGenerator","colKeys","rowKeys","pivotData","opts","valueCellColors","rowTotalColors","colTotalColors","colorScaleGenerator","rowTotalValues","map","getAggregator","colTotalValues","heatmapMode","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues"],"mappings":"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","file":"TableUtils.js","sourcesContent":["// helper function for setting row/col-span in pivotTableRenderer\nexport function getSpanSize(arr, i, j, multi, valsAttrs) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  if (multi && valsAttrs) {\n    return len * valsAttrs.length;\n  }\n  return len;\n}\n\n// It formats the resulting value either with the one\n// provided in the parameter or the default in the\n// aggregagor.\nexport function getFormattedValue(value, aggregator, formatter) {\n  if (!formatter) {\n    return aggregator.format(value);\n  }\n  return formatter(value);\n}\n\n// Functions for heatmap table if required.\nexport function redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nexport function getHeatmapColors(\n  tableColorScaleGenerator,\n  colKeys,\n  rowKeys,\n  pivotData,\n  opts\n) {\n  let valueCellColors = () => {};\n  let rowTotalColors = () => {};\n  let colTotalColors = () => {};\n\n  const colorScaleGenerator = tableColorScaleGenerator;\n  const rowTotalValues = colKeys.map(x =>\n    pivotData.getAggregator([], x).value()\n  );\n  rowTotalColors = colorScaleGenerator(rowTotalValues);\n  const colTotalValues = rowKeys.map(x =>\n    pivotData.getAggregator(x, []).value()\n  );\n  colTotalColors = colorScaleGenerator(colTotalValues);\n\n  if (opts.heatmapMode === 'full') {\n    const allValues = [];\n    rowKeys.map(r =>\n      colKeys.map(c => allValues.push(pivotData.getAggregator(r, c).value()))\n    );\n    const colorScale = colorScaleGenerator(allValues);\n    valueCellColors = (r, c, v) => colorScale(v);\n  } else if (opts.heatmapMode === 'row') {\n    const rowColorScales = {};\n    rowKeys.map(r => {\n      const rowValues = colKeys.map(x => pivotData.getAggregator(r, x).value());\n      rowColorScales[r] = colorScaleGenerator(rowValues);\n    });\n    valueCellColors = (r, c, v) => rowColorScales[r](v);\n  } else if (opts.heatmapMode === 'col') {\n    const colColorScales = {};\n    colKeys.map(c => {\n      const colValues = rowKeys.map(x => pivotData.getAggregator(x, c).value());\n      colColorScales[c] = colorScaleGenerator(colValues);\n    });\n    valueCellColors = (r, c, v) => colColorScales[c](v);\n  }\n  return [valueCellColors, rowTotalColors, colTotalColors];\n}\n"]}