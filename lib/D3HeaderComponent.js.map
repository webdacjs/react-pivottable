{"version":3,"sources":["../src/D3HeaderComponent.js"],"names":["d3","D3HeaderComponent","viewPortWidth","height","legendValues","maxValue","minValue","transformValue","val","includes","parseFloat","replace","data","map","x","push","scale","scaleLinear","domain","min","max","range","xAxis","axisBottom","ref","svg","attr","append","call","width","marginTop","marginRight","marginLeft"],"mappings":";;;;;;AAAA;;;;AACA;;IAAYA,E;;AACZ;;;;;;AAEA,SAASC,iBAAT,OAMG;AAAA,MALDC,aAKC,QALDA,aAKC;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,YAGC,QAHDA,YAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,QACC,QADDA,QACC;;AACD,WAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,QAAIA,QAAQ,EAAZ,EAAgB;AACd,aAAOF,QAAP;AACD;AACD,QAAIE,IAAIC,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACrB,aAAOC,WAAWF,IAAIG,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAX,IAAmC,IAA1C;AACD;AACD,QAAIH,IAAIC,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACrB,aAAOC,WAAWF,IAAIG,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAX,IAAmC,OAA1C;AACD;AACD,WAAOD,WAAWF,GAAX,CAAP;AACD;;AAED,MAAMI,OAAOR,aAAaS,GAAb,CAAiB;AAAA,WAAKN,eAAeO,CAAf,CAAL;AAAA,GAAjB,CAAb;AACAF,OAAKG,IAAL,CAAUV,QAAV;;AAEA,MAAMW,QAAQhB,GACXiB,WADW,GAEXC,MAFW,CAEJ,CAAClB,GAAGmB,GAAH,CAAOP,IAAP,CAAD,EAAeZ,GAAGoB,GAAH,CAAOR,IAAP,CAAf,CAFI,EAGXS,KAHW,CAGL,CAAC,CAAD,EAAInB,aAAJ,CAHK,CAAd;;AAKA,MAAMoB,QAAQtB,GAAGuB,UAAH,GAAgBP,KAAhB,CAAsBA,KAAtB,CAAd;;AAEA,MAAMQ,MAAM,mBACV,eAAO;AACLC,QACGC,IADH,CACQ,OADR,EACiBxB,aADjB,EAEGwB,IAFH,CAEQ,QAFR,EAEkBvB,MAFlB,EAGGwB,MAHH,CAGU,GAHV,EAIGC,IAJH,CAIQN,KAJR,EAKGI,IALH,CAKQ,cALR,EAKwB,CALxB,EAMGA,IANH,CAMQ,WANR;AAOD,GATS,EAUV,CAACtB,YAAD,CAVU,CAAZ;;AAaA,SACE;AACE,SAAKoB,GADP;AAEE,WAAO;AACLrB,cAAQA,MADH;AAEL0B,aAAO,MAFF;AAGLC,iBAAW,KAHN;AAILC,mBAAa,KAJR;AAKLC,kBAAY;AALP;AAFT,IADF;AAYD;;kBAEc/B,iB","file":"D3HeaderComponent.js","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport {useD3} from './d3hook.js';\n\nfunction D3HeaderComponent({\n  viewPortWidth,\n  height,\n  legendValues,\n  maxValue,\n  minValue,\n}) {\n  function transformValue(val) {\n    if (val === '') {\n      return minValue;\n    }\n    if (val.includes('k')) {\n      return parseFloat(val.replace('k', '')) * 1000;\n    }\n    if (val.includes('M')) {\n      return parseFloat(val.replace('M', '')) * 1000000;\n    }\n    return parseFloat(val);\n  }\n\n  const data = legendValues.map(x => transformValue(x));\n  data.push(maxValue);\n\n  const scale = d3\n    .scaleLinear()\n    .domain([d3.min(data), d3.max(data)])\n    .range([0, viewPortWidth]);\n\n  const xAxis = d3.axisBottom().scale(scale);\n\n  const ref = useD3(\n    svg => {\n      svg\n        .attr('width', viewPortWidth)\n        .attr('height', height)\n        .append('g')\n        .call(xAxis)\n        .attr('stroke-width', 0)\n        .attr('transform', `translate(0, -2)`);\n    },\n    [legendValues]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: height,\n        width: '100%',\n        marginTop: '0px',\n        marginRight: '0px',\n        marginLeft: '0px',\n      }}\n    ></svg>\n  );\n}\n\nexport default D3HeaderComponent;\n"]}