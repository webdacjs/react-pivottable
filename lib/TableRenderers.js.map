{"version":3,"sources":["../src/TableRenderers.jsx"],"names":["makeRenderer","opts","TableRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowsLabels","valsAttrs","vals","valsLabels","multiValue","isMultipe","formatter","hideColTotals","hideRowTotals","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","tableColorScaleGenerator","getClickHandler","tableOptions","clickCallback","value","rowValues","colValues","filters","Object","keys","i","attr","e","setSelectedRow","setState","prevState","rowid","getRowClassName","getCellValue","j","rowKey","colKey","aggregator","valuesWithKeys","values","map","k","x","getMultipleAttrNoColumnsTotals","totalAggregator","totalValuesWithKeys","totalvalues","getTableHeader","c","length","r","getTableBody","totalAggregatorValue","totalRowValue","reduce","a","b","txt","format","React","PureComponent","defaultProps","propTypes","redColorScaleGenerator","PropTypes","func","object","Table","TableBarchartRenderer","TSVExportRenderer","RawExportRenderer"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {\n  getSpanSize,\n  getFormattedValue,\n  redColorScaleGenerator,\n  getHeatmapColors,\n} from './TableUtils';\nimport TSVExportRenderer from './TsvRenderer';\nimport RawExportRenderer from './RawRenderer';\nimport TableBarchartRenderer from './TableBarchartRenderer';\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    constructor() {\n      super();\n      this.state = {selectedrow: null};\n    }\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      const rowsLabels = this.props.rowsLabels;\n      const valsAttrs = pivotData.props.vals;\n      const valsLabels = this.props.vals;\n      const multiValue = pivotData.isMultipe;\n      const formatter = pivotData.props.formatter;\n      const hideColTotals = pivotData.props.hideColTotals;\n      const hideRowTotals = pivotData.props.hideRowTotals;\n\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n\n      let valueCellColors = () => {};\n      let rowTotalColors = () => {};\n      let colTotalColors = () => {};\n\n      if (opts.heatmapMode) {\n        [valueCellColors, rowTotalColors, colTotalColors] = getHeatmapColors(\n          this.props.tableColorScaleGenerator,\n          colKeys,\n          rowKeys,\n          pivotData,\n          opts\n        );\n      }\n\n      const getClickHandler =\n        this.props.tableOptions && this.props.tableOptions.clickCallback\n          ? (value, rowValues, colValues) => {\n              const filters = {};\n              for (const i of Object.keys(colAttrs || {})) {\n                const attr = colAttrs[i];\n                if (colValues[i] !== null) {\n                  filters[attr] = colValues[i];\n                }\n              }\n              for (const i of Object.keys(rowAttrs || {})) {\n                const attr = rowAttrs[i];\n                if (rowValues[i] !== null) {\n                  filters[attr] = rowValues[i];\n                }\n              }\n              return e =>\n                this.props.tableOptions.clickCallback(\n                  e,\n                  value,\n                  filters,\n                  pivotData\n                );\n            }\n          : null;\n\n      const setSelectedRow = rowid => {\n        this.setState(prevState => ({\n          selectedrow: prevState.selectedrow === rowid ? null : rowid,\n        }));\n      };\n\n      const getRowClassName = rowid => {\n        if (rowid === this.state.selectedrow) {\n          return 'selected';\n        }\n        return null;\n      };\n\n      function getCellValue(i, j, rowKey, colKey) {\n        const aggregator = pivotData.getAggregator(rowKey, colKey);\n        if (!multiValue) {\n          return (\n            <td\n              className=\"pvtVal\"\n              key={`pvtVal${i}-${j}`}\n              onClick={\n                getClickHandler &&\n                getClickHandler(aggregator.value(), rowKey, colKey)\n              }\n              style={valueCellColors(rowKey, colKey, aggregator.value())}\n            >\n              {getFormattedValue(aggregator.value(), aggregator, formatter)}\n            </td>\n          );\n        }\n        const valuesWithKeys = aggregator.value();\n        const values = Object.keys(valuesWithKeys).map(k => valuesWithKeys[k]);\n        return values.map((value, x) => (\n          <td\n            className=\"pvtVal\"\n            key={`pvtVal${i}-${j}-${x}`}\n            onClick={getClickHandler && getClickHandler(value, rowKey, colKey)}\n            style={valueCellColors(rowKey, colKey, value)}\n          >\n            {getFormattedValue(value, aggregator, formatter)}\n          </td>\n        ));\n      }\n\n      function getMultipleAttrNoColumnsTotals() {\n        const totalAggregator = pivotData.getAggregator([], []);\n        const totalValuesWithKeys = totalAggregator.value();\n        const totalvalues = Object.keys(totalValuesWithKeys).map(\n          k => totalValuesWithKeys[k]\n        );\n        return totalvalues.map((value, x) => (\n          <td\n            className=\"pvtVal\"\n            key={`total${x}`}\n            style={rowTotalColors(value)}\n          >\n            {getFormattedValue(value, totalAggregator, formatter)}\n          </td>\n        ));\n      }\n\n      function getTableHeader() {\n        return (\n          <thead>\n            {colAttrs.map((c, j) => {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 && rowAttrs.length !== 0 && (\n                    <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                  )}\n                  <th className=\"pvtAxisLabel\">{c}</th>\n                  {colKeys.map((colKey, i) => {\n                    const x = getSpanSize(colKeys, i, j, multiValue, valsAttrs);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {colKey[j]}\n                        {multiValue &&\n                          valsAttrs &&\n                          valsAttrs.map((x, i) => (\n                            <th key={`valsAttr${i}`}>\n                              {valsLabels && valsLabels[i] ? valsLabels[i] : x}\n                            </th>\n                          ))}\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && !hideRowTotals && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function(r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                      {rowsLabels && rowsLabels[i] ? rowsLabels[i] : r}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  valsAttrs.map((x, i) => (\n                    <th className=\"pvtAttrLabel\" key={`attrKey${i}`}>\n                      {valsLabels && valsLabels[i] ? valsLabels[i] : x}\n                    </th>\n                  ))}\n                {!hideRowTotals && (\n                  <th className=\"pvtTotalLabel\">\n                    {colAttrs.length === 0 ? 'Totals' : null}\n                  </th>\n                )}\n              </tr>\n            )}\n          </thead>\n        );\n      }\n\n      function getTableBody() {\n        return (\n          <tbody>\n            {rowKeys.map((rowKey, i) => {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              const totalAggregatorValue = totalAggregator.value();\n              const totalRowValue = multiValue\n                ? Object.keys(totalAggregatorValue)\n                    .map(k => totalAggregatorValue[k])\n                    .reduce((a, b) => a + b, 0)\n                : totalAggregatorValue;\n              return (\n                <tr\n                  key={`rowKeyRow${i}`}\n                  className={getRowClassName(`rowKeyRow${i}`)}\n                  onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n                >\n                  {rowKey.map((txt, j) => {\n                    const x = getSpanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function(colKey, j) {\n                    return getCellValue(i, j, rowKey, colKey);\n                  })}\n                  {colAttrs.length === 0 &&\n                    multiValue &&\n                    valsAttrs &&\n                    getCellValue(i, 0, rowKey, [])}\n                  {!hideRowTotals && (\n                    <td\n                      className=\"pvtTotal\"\n                      onClick={\n                        getClickHandler &&\n                        getClickHandler(totalRowValue, rowKey, [null])\n                      }\n                      style={colTotalColors(totalRowValue)}\n                    >\n                      {getFormattedValue(\n                        totalRowValue,\n                        totalAggregator,\n                        formatter\n                      )}\n                    </td>\n                  )}\n                </tr>\n              );\n            })}\n\n            {!hideColTotals && (\n              <tr>\n                <th\n                  className=\"pvtTotalLabel\"\n                  colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n                >\n                  Totals\n                </th>\n\n                {colKeys.map(function(colKey, i) {\n                  const totalAggregator = pivotData.getAggregator([], colKey);\n                  if (!multiValue) {\n                    return (\n                      <td\n                        className=\"pvtTotal\"\n                        key={`total${i}`}\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(\n                            totalAggregator.value(),\n                            [null],\n                            colKey\n                          )\n                        }\n                        style={rowTotalColors(totalAggregator.value())}\n                      >\n                        {getFormattedValue(\n                          totalAggregator.value(),\n                          totalAggregator,\n                          formatter\n                        )}\n                      </td>\n                    );\n                  }\n                  const totalValuesWithKeys = totalAggregator.value();\n                  const totalvalues = Object.keys(totalValuesWithKeys).map(\n                    k => totalValuesWithKeys[k]\n                  );\n                  return totalvalues.map((value, x) => (\n                    <td\n                      className=\"pvtVal\"\n                      key={`total${i}-${x}`}\n                      onClick={\n                        getClickHandler &&\n                        getClickHandler(value, [null], colKey)\n                      }\n                      style={rowTotalColors(value)}\n                    >\n                      {getFormattedValue(value, totalAggregator, formatter)}\n                    </td>\n                  ));\n                })}\n\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getMultipleAttrNoColumnsTotals()}\n\n                {!hideRowTotals && (\n                  <td\n                    onClick={\n                      getClickHandler &&\n                      getClickHandler(\n                        grandTotalAggregator.value(),\n                        [null],\n                        [null]\n                      )\n                    }\n                    className=\"pvtGrandTotal\"\n                  >\n                    {grandTotalAggregator.format(grandTotalAggregator.value())}\n                  </td>\n                )}\n              </tr>\n            )}\n          </tbody>\n        );\n      }\n\n      return (\n        <table className=\"pvtTable\">\n          {getTableHeader()}\n          {getTableBody()}\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Table Barchart': TableBarchartRenderer,\n  'Exportable TSV': TSVExportRenderer,\n  'Raw Exportable JSON': RawExportRenderer,\n};\n"]}