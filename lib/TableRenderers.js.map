{"version":3,"sources":["../src/TableRenderers.jsx"],"names":["spanSize","arr","i","j","multi","valsAttrs","x","asc","end","noDraw","len","length","asc1","end1","stop","redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","backgroundColor","makeRenderer","opts","TableRenderer","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","vals","multiValue","isMultipe","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","colorScaleGenerator","tableColorScaleGenerator","rowTotalValues","map","value","colTotalValues","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues","getClickHandler","tableOptions","clickCallback","filters","Object","keys","attr","e","getCellValue","rowKey","colKey","aggregator","format","valuesWithKeys","k","totalAggregator","totalAggregatorValue","totalRowValue","reduce","a","b","txt","totalValuesWithKeys","totalvalues","React","PureComponent","defaultProps","propTypes","PropTypes","func","object","TSVExportRenderer","headerRow","aggregatorName","join","result","row","unshift","width","window","innerWidth","height","innerHeight","RawExportRenderer","JSON","stringify","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\n\n// helper function for setting row/col-span in pivotTableRenderer\nconst spanSize = function(arr, i, j, multi, valsAttrs) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  if (multi && valsAttrs) {\n    return len * valsAttrs.length;\n  }\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      const valsAttrs = pivotData.props.vals;\n      const multiValue = pivotData.isMultipe;\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n\n      let valueCellColors = () => {};\n      let rowTotalColors = () => {};\n      let colTotalColors = () => {};\n      if (opts.heatmapMode) {\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\n        const rowTotalValues = colKeys.map(x =>\n          pivotData.getAggregator([], x).value()\n        );\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\n        const colTotalValues = rowKeys.map(x =>\n          pivotData.getAggregator(x, []).value()\n        );\n        colTotalColors = colorScaleGenerator(colTotalValues);\n\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          rowKeys.map(r =>\n            colKeys.map(c =>\n              allValues.push(pivotData.getAggregator(r, c).value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          rowKeys.map(r => {\n            const rowValues = colKeys.map(x =>\n              pivotData.getAggregator(r, x).value()\n            );\n            rowColorScales[r] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          colKeys.map(c => {\n            const colValues = rowKeys.map(x =>\n              pivotData.getAggregator(x, c).value()\n            );\n            colColorScales[c] = colorScaleGenerator(colValues);\n          });\n          valueCellColors = (r, c, v) => colColorScales[c](v);\n        }\n      }\n\n      const getClickHandler =\n        this.props.tableOptions && this.props.tableOptions.clickCallback\n          ? (value, rowValues, colValues) => {\n              const filters = {};\n              for (const i of Object.keys(colAttrs || {})) {\n                const attr = colAttrs[i];\n                if (colValues[i] !== null) {\n                  filters[attr] = colValues[i];\n                }\n              }\n              for (const i of Object.keys(rowAttrs || {})) {\n                const attr = rowAttrs[i];\n                if (rowValues[i] !== null) {\n                  filters[attr] = rowValues[i];\n                }\n              }\n              return e =>\n                this.props.tableOptions.clickCallback(\n                  e,\n                  value,\n                  filters,\n                  pivotData\n                );\n            }\n          : null;\n\n      function getCellValue(i, j, rowKey, colKey) {\n        const aggregator = pivotData.getAggregator(rowKey, colKey);\n        if (!multiValue) {\n          return (\n            <td\n              className=\"pvtVal\"\n              key={`pvtVal${i}-${j}`}\n              onClick={\n                getClickHandler &&\n                getClickHandler(aggregator.value(), rowKey, colKey)\n              }\n              style={valueCellColors(rowKey, colKey, aggregator.value())}\n            >\n              {aggregator.format(aggregator.value())}\n            </td>\n          );\n        }\n        const valuesWithKeys = aggregator.value();\n        const values = Object.keys(valuesWithKeys).map(k => valuesWithKeys[k]);\n        return values.map((value, x) => (\n          <td\n            className=\"pvtVal\"\n            key={`pvtVal${i}-${j}-${x}`}\n            onClick={getClickHandler && getClickHandler(value, rowKey, colKey)}\n            style={valueCellColors(rowKey, colKey, value)}\n          >\n            {aggregator.format(value)}\n          </td>\n        ));\n      }\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map(function(c, j) {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 && rowAttrs.length !== 0 && (\n                    <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                  )}\n                  <th className=\"pvtAxisLabel\">{c}</th>\n                  {colKeys.map(function(colKey, i) {\n                    const x = spanSize(colKeys, i, j, multiValue, valsAttrs);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {colKey[j]}\n                        {multiValue &&\n                          valsAttrs &&\n                          valsAttrs.map(x => <th>{x}</th>)}\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function(r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                      {r}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  valsAttrs.map(x => <th>{x}</th>)}\n\n                <th className=\"pvtTotalLabel\">\n                  {colAttrs.length === 0 ? 'Totals' : null}\n                </th>\n              </tr>\n            )}\n          </thead>\n\n          <tbody>\n            {rowKeys.map(function(rowKey, i) {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              const totalAggregatorValue = totalAggregator.value();\n              const totalRowValue = multiValue\n                ? Object.keys(totalAggregatorValue)\n                    .map(k => totalAggregatorValue[k])\n                    .reduce((a, b) => a + b, 0)\n                : totalAggregatorValue;\n              return (\n                <tr key={`rowKeyRow${i}`}>\n                  {rowKey.map(function(txt, j) {\n                    const x = spanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function(colKey, j) {\n                    return getCellValue(i, j, rowKey, colKey);\n                  })}\n                  {colAttrs.length === 0 &&\n                    multiValue &&\n                    valsAttrs &&\n                    getCellValue(i, 0, rowKey, [])}\n                  <td\n                    className=\"pvtTotal\"\n                    onClick={\n                      getClickHandler &&\n                      getClickHandler(totalRowValue, rowKey, [null])\n                    }\n                    style={colTotalColors(totalRowValue)}\n                  >\n                    {totalAggregator.format(totalRowValue)}\n                  </td>\n                </tr>\n              );\n            })}\n\n            <tr>\n              <th\n                className=\"pvtTotalLabel\"\n                colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n              >\n                Totals\n              </th>\n\n              {colKeys.map(function(colKey, i) {\n                const totalAggregator = pivotData.getAggregator([], colKey);\n                if (!multiValue) {\n                  return (\n                    <td\n                      className=\"pvtTotal\"\n                      key={`total${i}`}\n                      onClick={\n                        getClickHandler &&\n                        getClickHandler(totalAggregator.value(), [null], colKey)\n                      }\n                      style={rowTotalColors(totalAggregator.value())}\n                    >\n                      {totalAggregator.format(totalAggregator.value())}\n                    </td>\n                  );\n                }\n                const totalValuesWithKeys = totalAggregator.value();\n                const totalvalues = Object.keys(totalValuesWithKeys).map(\n                  k => totalValuesWithKeys[k]\n                );\n                return totalvalues.map((value, x) => (\n                  <td\n                    className=\"pvtVal\"\n                    key={`total${i}-${x}`}\n                    onClick={\n                      getClickHandler && getClickHandler(value, [null], colKey)\n                    }\n                    style={rowTotalColors(value)}\n                  >\n                    {totalAggregator.format(value)}\n                  </td>\n                ));\n              })}\n\n              <td\n                onClick={\n                  getClickHandler &&\n                  getClickHandler(grandTotalAggregator.value(), [null], [null])\n                }\n                className=\"pvtGrandTotal\"\n              >\n                {grandTotalAggregator.format(grandTotalAggregator.value())}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nclass RawExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n\n    return (\n      <textarea\n        value={JSON.stringify(pivotData, null, 4)} // eslint-disable-line\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nRawExportRenderer.defaultProps = PivotData.defaultProps;\nRawExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Exportable TSV': TSVExportRenderer,\n  'Raw Exportable JSON': RawExportRenderer,\n};\n"]}