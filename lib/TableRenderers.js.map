{"version":3,"sources":["../src/TableRenderers.jsx"],"names":["spanSize","arr","i","j","multi","valsAttrs","x","asc","end","noDraw","len","length","asc1","end1","stop","redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","backgroundColor","getFormattedValue","value","aggregator","formatter","format","makeRenderer","opts","TableRenderer","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","vals","multiValue","isMultipe","hideColTotals","hideRowTotals","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","colorScaleGenerator","tableColorScaleGenerator","rowTotalValues","map","colTotalValues","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues","getClickHandler","tableOptions","clickCallback","filters","Object","keys","attr","e","getCellValue","rowKey","colKey","valuesWithKeys","k","getMultipleAttrNoColumnsTotals","totalAggregator","totalValuesWithKeys","totalvalues","totalAggregatorValue","totalRowValue","reduce","a","b","txt","React","PureComponent","defaultProps","propTypes","PropTypes","func","object","TSVExportRenderer","headerRow","aggregatorName","join","result","row","unshift","width","window","innerWidth","height","innerHeight","RawExportRenderer","JSON","stringify","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\n\n// helper function for setting row/col-span in pivotTableRenderer\nconst spanSize = function(arr, i, j, multi, valsAttrs) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  if (multi && valsAttrs) {\n    return len * valsAttrs.length;\n  }\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nfunction getFormattedValue(value, aggregator, formatter) {\n  if (!formatter) {\n    return aggregator.format(value);\n  }\n  return formatter(value);\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      const valsAttrs = pivotData.props.vals;\n      const multiValue = pivotData.isMultipe;\n      const formatter = pivotData.props.formatter;\n      const hideColTotals = pivotData.props.hideColTotals;\n      const hideRowTotals = pivotData.props.hideRowTotals;\n\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n\n      let valueCellColors = () => {};\n      let rowTotalColors = () => {};\n      let colTotalColors = () => {};\n\n      if (opts.heatmapMode) {\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\n        const rowTotalValues = colKeys.map(x =>\n          pivotData.getAggregator([], x).value()\n        );\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\n        const colTotalValues = rowKeys.map(x =>\n          pivotData.getAggregator(x, []).value()\n        );\n        colTotalColors = colorScaleGenerator(colTotalValues);\n\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          rowKeys.map(r =>\n            colKeys.map(c =>\n              allValues.push(pivotData.getAggregator(r, c).value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          rowKeys.map(r => {\n            const rowValues = colKeys.map(x =>\n              pivotData.getAggregator(r, x).value()\n            );\n            rowColorScales[r] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          colKeys.map(c => {\n            const colValues = rowKeys.map(x =>\n              pivotData.getAggregator(x, c).value()\n            );\n            colColorScales[c] = colorScaleGenerator(colValues);\n          });\n          valueCellColors = (r, c, v) => colColorScales[c](v);\n        }\n      }\n\n      const getClickHandler =\n        this.props.tableOptions && this.props.tableOptions.clickCallback\n          ? (value, rowValues, colValues) => {\n              const filters = {};\n              for (const i of Object.keys(colAttrs || {})) {\n                const attr = colAttrs[i];\n                if (colValues[i] !== null) {\n                  filters[attr] = colValues[i];\n                }\n              }\n              for (const i of Object.keys(rowAttrs || {})) {\n                const attr = rowAttrs[i];\n                if (rowValues[i] !== null) {\n                  filters[attr] = rowValues[i];\n                }\n              }\n              return e =>\n                this.props.tableOptions.clickCallback(\n                  e,\n                  value,\n                  filters,\n                  pivotData\n                );\n            }\n          : null;\n\n      function getCellValue(i, j, rowKey, colKey) {\n        const aggregator = pivotData.getAggregator(rowKey, colKey);\n        if (!multiValue) {\n          return (\n            <td\n              className=\"pvtVal\"\n              key={`pvtVal${i}-${j}`}\n              onClick={\n                getClickHandler &&\n                getClickHandler(aggregator.value(), rowKey, colKey)\n              }\n              style={valueCellColors(rowKey, colKey, aggregator.value())}\n            >\n              {getFormattedValue(aggregator.value(), aggregator, formatter)}\n            </td>\n          );\n        }\n        const valuesWithKeys = aggregator.value();\n        const values = Object.keys(valuesWithKeys).map(k => valuesWithKeys[k]);\n        return values.map((value, x) => (\n          <td\n            className=\"pvtVal\"\n            key={`pvtVal${i}-${j}-${x}`}\n            onClick={getClickHandler && getClickHandler(value, rowKey, colKey)}\n            style={valueCellColors(rowKey, colKey, value)}\n          >\n            {getFormattedValue(value, aggregator, formatter)}\n          </td>\n        ));\n      }\n\n      function getMultipleAttrNoColumnsTotals() {\n        const totalAggregator = pivotData.getAggregator([], []);\n        const totalValuesWithKeys = totalAggregator.value();\n        const totalvalues = Object.keys(totalValuesWithKeys).map(\n          k => totalValuesWithKeys[k]\n        );\n        return totalvalues.map((value, x) => (\n          <td\n            className=\"pvtVal\"\n            key={`total${x}`}\n            style={rowTotalColors(value)}\n          >\n            {getFormattedValue(value, totalAggregator, formatter)}\n          </td>\n        ));\n      }\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map(function(c, j) {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 && rowAttrs.length !== 0 && (\n                    <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                  )}\n                  <th className=\"pvtAxisLabel\">{c}</th>\n                  {colKeys.map(function(colKey, i) {\n                    const x = spanSize(colKeys, i, j, multiValue, valsAttrs);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {colKey[j]}\n                        {multiValue &&\n                          valsAttrs &&\n                          valsAttrs.map(x => <th>{x}</th>)}\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && !hideRowTotals && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function(r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                      {r}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  valsAttrs.map(x => <th>{x}</th>)}\n                {!hideRowTotals && (\n                  <th className=\"pvtTotalLabel\">\n                    {colAttrs.length === 0 ? 'Totals' : null}\n                  </th>\n                )}\n              </tr>\n            )}\n          </thead>\n\n          <tbody>\n            {rowKeys.map(function(rowKey, i) {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              const totalAggregatorValue = totalAggregator.value();\n              const totalRowValue = multiValue\n                ? Object.keys(totalAggregatorValue)\n                    .map(k => totalAggregatorValue[k])\n                    .reduce((a, b) => a + b, 0)\n                : totalAggregatorValue;\n              return (\n                <tr key={`rowKeyRow${i}`}>\n                  {rowKey.map(function(txt, j) {\n                    const x = spanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function(colKey, j) {\n                    return getCellValue(i, j, rowKey, colKey);\n                  })}\n                  {colAttrs.length === 0 &&\n                    multiValue &&\n                    valsAttrs &&\n                    getCellValue(i, 0, rowKey, [])}\n                  {!hideRowTotals && (\n                    <td\n                      className=\"pvtTotal\"\n                      onClick={\n                        getClickHandler &&\n                        getClickHandler(totalRowValue, rowKey, [null])\n                      }\n                      style={colTotalColors(totalRowValue)}\n                    >\n                      {getFormattedValue(\n                        totalRowValue,\n                        totalAggregator,\n                        formatter\n                      )}\n                    </td>\n                  )}\n                </tr>\n              );\n            })}\n\n            {!hideColTotals && (\n              <tr>\n                <th\n                  className=\"pvtTotalLabel\"\n                  colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n                >\n                  Totals\n                </th>\n\n                {colKeys.map(function(colKey, i) {\n                  const totalAggregator = pivotData.getAggregator([], colKey);\n                  if (!multiValue) {\n                    return (\n                      <td\n                        className=\"pvtTotal\"\n                        key={`total${i}`}\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(\n                            totalAggregator.value(),\n                            [null],\n                            colKey\n                          )\n                        }\n                        style={rowTotalColors(totalAggregator.value())}\n                      >\n                        {getFormattedValue(\n                          totalAggregator.value(),\n                          totalAggregator,\n                          formatter\n                        )}\n                      </td>\n                    );\n                  }\n                  const totalValuesWithKeys = totalAggregator.value();\n                  const totalvalues = Object.keys(totalValuesWithKeys).map(\n                    k => totalValuesWithKeys[k]\n                  );\n                  return totalvalues.map((value, x) => (\n                    <td\n                      className=\"pvtVal\"\n                      key={`total${i}-${x}`}\n                      onClick={\n                        getClickHandler &&\n                        getClickHandler(value, [null], colKey)\n                      }\n                      style={rowTotalColors(value)}\n                    >\n                      {getFormattedValue(value, totalAggregator, formatter)}\n                    </td>\n                  ));\n                })}\n\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getMultipleAttrNoColumnsTotals()}\n\n                {!hideRowTotals && (\n                  <td\n                    onClick={\n                      getClickHandler &&\n                      getClickHandler(\n                        grandTotalAggregator.value(),\n                        [null],\n                        [null]\n                      )\n                    }\n                    className=\"pvtGrandTotal\"\n                  >\n                    {grandTotalAggregator.format(grandTotalAggregator.value())}\n                  </td>\n                )}\n              </tr>\n            )}\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nclass RawExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n\n    return (\n      <textarea\n        value={JSON.stringify(pivotData, null, 4)} // eslint-disable-line\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nRawExportRenderer.defaultProps = PivotData.defaultProps;\nRawExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Exportable TSV': TSVExportRenderer,\n  'Raw Exportable JSON': RawExportRenderer,\n};\n"]}