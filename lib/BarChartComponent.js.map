{"version":3,"sources":["../src/BarChartComponent.js"],"names":["BarChartComponent","index","value","thiskey","stacked","maxValsAttrs","minValsAttrs","barchartClassNames","showBarValues","showPopOver","usePercentages","popOverFormatter","rowkey","originalValues","valsAttrs","rowAttrs","formatPopOverValue","val","hovered","setHovered","popOverKeys","popOverValues","map","x","getPercentageFromValue","key","percValue","getBarValue","percentage","toFixed","getBarWrapperClassName","wrapper","getBarClassName","bars","width","barValue","minPerc","chartStyle","marginLeft","getStackedBar","getNonStackedBar","getPopOver","i"],"mappings":"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","file":"BarChartComponent.js","sourcesContent":["import React, {useState} from 'react';\nimport Popover from 'react-popover';\n\nexport default function BarChartComponent({\n  index,\n  value,\n  thiskey,\n  stacked,\n  maxValsAttrs,\n  minValsAttrs,\n  barchartClassNames,\n  showBarValues,\n  showPopOver,\n  usePercentages,\n  popOverFormatter,\n  rowkey,\n  originalValues,\n  valsAttrs,\n  rowAttrs,\n}) {\n  const formatPopOverValue = val =>\n    popOverFormatter ? popOverFormatter(val) : val;\n\n  const [hovered, setHovered] = useState(false);\n  const popOverKeys = [...rowAttrs, ...valsAttrs];\n  const popOverValues = [\n    ...rowkey,\n    ...originalValues.map(x => formatPopOverValue(x)),\n  ];\n\n  function getPercentageFromValue(value, key) {\n    // If using % the values should be in the % range\n    if (usePercentages) {\n      return (value / 100) * 100;\n    }\n    // Other the % is calculated based on the maximum value obtained.\n    const percValue = (value / maxValsAttrs[key]) * 100;\n    return percValue;\n  }\n\n  function getBarValue(value, percentage) {\n    if (!showBarValues || value === 0) {\n      return <span className=\"barChartLabel\"></span>;\n    }\n    if (usePercentages) {\n      return (\n        <span className=\"barChartLabel\">{`${percentage.toFixed(1)}%`}</span>\n      );\n    }\n    return <span className=\"barChartLabel\">{value}</span>;\n  }\n\n  const getBarWrapperClassName = () => {\n    if (barchartClassNames && barchartClassNames.wrapper) {\n      return barchartClassNames.wrapper;\n    }\n    return 'bar-chart-bar';\n  };\n\n  const getBarClassName = index => {\n    if (\n      barchartClassNames &&\n      barchartClassNames.bars &&\n      barchartClassNames.bars[index]\n    ) {\n      return barchartClassNames.bars[index];\n    }\n    return `bar bar${index + 1}`;\n  };\n\n  const width = getPercentageFromValue(value, thiskey);\n  const barValue = getBarValue(value, getPercentageFromValue(value, thiskey));\n\n  const minPerc =\n    minValsAttrs[thiskey] > 0\n      ? 0\n      : getPercentageFromValue(minValsAttrs[thiskey], thiskey) * -1;\n  const chartStyle =\n    width > 0\n      ? {width: `${width}%`, marginLeft: `${minPerc}%`}\n      : {width: `${width * -1}%`, marginLeft: `${minPerc - width * -1}%`};\n\n  const getStackedBar = () => (\n    <div\n      className={getBarClassName(index)}\n      style={chartStyle}\n      onMouseOver={() => setHovered(true)}\n      onMouseOut={() => setHovered()}\n    >\n      {barValue}\n    </div>\n  );\n\n  const getNonStackedBar = () => (\n    <div\n      className={getBarWrapperClassName()}\n      key={`bar-chart-${index}`}\n      onMouseOver={() => setHovered(true)}\n      onMouseOut={() => setHovered()}\n    >\n      <div className={getBarClassName(index)} style={chartStyle}>\n        {barValue}\n      </div>\n    </div>\n  );\n\n  const getPopOver = () => (\n    <div className=\"popoverBox\">\n      <table className=\"popOverBox-table\">\n        <tbody>\n          {popOverKeys.map((key, i) => (\n            <tr key={`tr-${i}`}>\n              <td className=\"popOverBox-table-cell\" key={`tdk-${i}`}>\n                {key}:\n              </td>\n              <td className=\"popOverBox-table-cell\" key={`tdv-${i}`}>\n                <b>{popOverValues[i]}</b>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  return (\n    <Popover\n      isOpen={showPopOver ? hovered : false}\n      preferPlace={'below'}\n      body={getPopOver()}\n    >\n      {stacked && getStackedBar()}\n      {!stacked && getNonStackedBar()}\n    </Popover>\n  );\n}\n"]}