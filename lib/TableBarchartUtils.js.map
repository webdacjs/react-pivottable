{"version":3,"sources":["../src/TableBarchartUtils.js"],"names":["getAbsoluteMax","getMaxValsAttrs","getMinValsAttrs","getLegendValues","getWrapperWidth","getGaugedWrapperWidth","getBarClassName","getPercentageFromValue","getBarValue","getChartStyle","getBarWrapperClassName","excludeKeys","thousand","roundToCeil","val","rounded","Math","round","powVal","String","length","multiple","pow","ceil","getTotalRowsValsAttr","rowTotals","Object","keys","map","row","filter","includes","x","y","flat","getAbsoluteMin","min","minValsAttrs","maxValsAttrs","max","getSummed","totalRowsValsAttr","postprocessfn","totalRowsValsProcessed","reduce","a","b","vals","stacked","minVal","obj","totalRowsValsAttrAdjusted","parseFloat","Number","absoluteMax","maxVal","absoluteMin","getAdjustedValue","usePercentages","legendFormatter","nearestFiveVal","toFixed","steps","realAbsoluteMin","realAbsoluteMax","stepValue","legendMarkers","Array","legendValues","slice","width","value","restValuesSum","index","barchartClassNames","bars","key","percValue","thiskey","showBarValues","percentage","gauged","minPerc","chartStyle","marginLeft","position","wrapper"],"mappings":"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","file":"TableBarchartUtils.js","sourcesContent":["import React from 'react';\n\nconst excludeKeys = ['push', 'value', 'format', 'numInputs'];\nconst thousand = 1000;\n\nfunction roundToCeil(val) {\n  const rounded = Math.round(val);\n  const powVal = String(rounded).length > 3 ? String(rounded).length - 2 : 1;\n  const multiple = Math.pow(10, powVal);\n  return Math.ceil(val / multiple) * multiple;\n}\n\nfunction getTotalRowsValsAttr(rowTotals) {\n  return Object.keys(rowTotals)\n    .map(row =>\n      Object.keys(rowTotals[row])\n        .filter(x => !excludeKeys.includes(x))\n        .map(y => rowTotals[row][y])\n    )\n    .flat();\n}\n\nconst getAbsoluteMin = minValsAttrs => {\n  return Math.min(...Object.keys(minValsAttrs).map(x => minValsAttrs[x]));\n};\n\nexport function getAbsoluteMax(maxValsAttrs) {\n  return Math.max(...Object.keys(maxValsAttrs).map(x => maxValsAttrs[x]));\n}\n\nconst getSummed = (totalRowsValsAttr, postprocessfn) => {\n  if (postprocessfn) {\n    const totalRowsValsProcessed = totalRowsValsAttr.map(x => postprocessfn(x));\n    return totalRowsValsProcessed.map(x =>\n      Object.keys(x)\n        .map(y => x[y])\n        .reduce((a, b) => a + b, 0)\n    );\n  }\n  return totalRowsValsAttr.map(x =>\n    Object.keys(x)\n      .map(y => x[y])\n      .reduce((a, b) => a + b, 0)\n  );\n};\n\n// Function to get the maximum value for each one fhe vals (used to calculate the bar widths).\nexport function getMaxValsAttrs(\n  rowTotals,\n  vals,\n  stacked,\n  minVal,\n  postprocessfn\n) {\n  if (minVal === 0 || minVal) {\n    return vals.reduce((obj, val) => {\n      obj[val] = minVal;\n      return obj;\n    }, {});\n  }\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const max = Math.max(...getSummed(totalRowsValsAttr, postprocessfn));\n    return vals.reduce((obj, val) => {\n      obj[val] = max;\n      return obj;\n    }, {});\n  }\n  const totalRowsValsAttrAdjusted = postprocessfn\n    ? totalRowsValsAttr.map(x => postprocessfn(x))\n    : totalRowsValsAttr;\n  const maxValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.max(\n      ...totalRowsValsAttrAdjusted\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMax = roundToCeil(getAbsoluteMax(maxValsAttrs));\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMax;\n    return obj;\n  }, {});\n}\n\n// Function to get the minimum value for each one fhe vals (used to calculate the bar widths).\nexport function getMinValsAttrs(\n  rowTotals,\n  vals,\n  stacked,\n  maxVal,\n  postprocessfn\n) {\n  if (maxVal === 0 || maxVal) {\n    return vals.reduce((obj, val) => {\n      obj[val] = maxVal;\n      return obj;\n    }, {});\n  }\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const min = Math.min(...getSummed(totalRowsValsAttr, postprocessfn));\n    return vals.reduce((obj, val) => {\n      obj[val] = min;\n      return obj;\n    }, {});\n  }\n  const minValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.min(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMin;\n    return obj;\n  }, {});\n}\n\nfunction getAdjustedValue(val, usePercentages, legendFormatter) {\n  if (legendFormatter) {\n    return legendFormatter(val);\n  }\n  const nearestFiveVal = Math.ceil(val / 5) * 5;\n  if (usePercentages) {\n    return `${nearestFiveVal}%`;\n  }\n  return nearestFiveVal > thousand\n    ? `${(nearestFiveVal / thousand).toFixed(2)}k`\n    : nearestFiveVal.toFixed(0);\n}\n\nexport function getLegendValues(\n  maxValsAttrs,\n  minValsAttrs,\n  steps,\n  usePercentages,\n  legendFormatter\n) {\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n  const absoluteMax = getAbsoluteMax(maxValsAttrs);\n\n  // Dealing with % cases and post process function\n  // where the min === max.\n  const realAbsoluteMin = usePercentages || absoluteMin > 0 ? 0 : absoluteMin;\n  const realAbsoluteMax =\n    usePercentages && absoluteMax < 100 ? 100 : absoluteMax;\n  const stepValue = (realAbsoluteMax - realAbsoluteMin) / steps;\n\n  const legendMarkers = [...Array(steps).keys()].map(x =>\n    getAdjustedValue((x + 1) * stepValue, usePercentages, legendFormatter)\n  );\n  // Not showing the first and last element from the legend values.\n  return {\n    legendValues: ['', ...legendMarkers.slice(0, -1)],\n    absoluteMax,\n    absoluteMin,\n  };\n}\n\n// This function helps to adjust the wrapper width in case there is\n// a % overflow (ie. the max value = 240%)\nexport function getWrapperWidth(usePercentages, absoluteMax) {\n  if (!usePercentages) {\n    return;\n  }\n  if (absoluteMax <= 100) {\n    return;\n  }\n  return {width: (1000 / absoluteMax) * 10 + '%'};\n}\n\nexport function getGaugedWrapperWidth(value, restValuesSum, absoluteMax) {\n  return {width: '100%'};\n}\n\nexport function getBarClassName(index, barchartClassNames) {\n  if (\n    barchartClassNames &&\n    barchartClassNames.bars &&\n    barchartClassNames.bars[index]\n  ) {\n    return barchartClassNames.bars[index];\n  }\n  return `bar bar${index + 1}`;\n}\n\nexport function getPercentageFromValue(\n  value,\n  key,\n  maxValsAttrs,\n  usePercentages\n) {\n  // If using % the values should be in the % range\n  if (usePercentages) {\n    return (value / 100) * 100;\n  }\n  // Other the % is calculated based on the maximum value obtained.\n  const percValue = (value / maxValsAttrs[key]) * 100;\n  return percValue;\n}\n\nexport function getBarValue(\n  value,\n  thiskey,\n  maxValsAttrs,\n  showBarValues,\n  usePercentages\n) {\n  if (!showBarValues || value === 0) {\n    return <span className=\"barChartLabel\"></span>;\n  }\n  if (usePercentages) {\n    const percentage = getPercentageFromValue(\n      value,\n      thiskey,\n      maxValsAttrs,\n      usePercentages\n    );\n    return <span className=\"barChartLabel\">{`${percentage.toFixed(1)}%`}</span>;\n  }\n  return <span className=\"barChartLabel\">{value}</span>;\n}\n\nexport function getChartStyle(\n  value,\n  thiskey,\n  maxValsAttrs,\n  minValsAttrs,\n  usePercentages,\n  gauged\n) {\n  const width = getPercentageFromValue(\n    value,\n    thiskey,\n    maxValsAttrs,\n    usePercentages\n  );\n  const minPerc =\n    minValsAttrs[thiskey] > 0\n      ? 0\n      : getPercentageFromValue(\n          minValsAttrs[thiskey],\n          thiskey,\n          maxValsAttrs,\n          usePercentages\n        ) * -1;\n  const chartStyle =\n    width > 0\n      ? {width: `${width}%`, marginLeft: `${minPerc}%`}\n      : {width: `${width * -1}%`, marginLeft: `${minPerc - width * -1}%`};\n  if (gauged) {\n    const {width, marginLeft} = chartStyle;\n    return {width, marginLeft, position: 'absolute'};\n  }\n  return chartStyle;\n}\n\nexport function getBarWrapperClassName(barchartClassNames) {\n  if (barchartClassNames && barchartClassNames.wrapper) {\n    return barchartClassNames.wrapper;\n  }\n  return 'bar-chart-bar';\n}\n"]}