{"version":3,"sources":["../src/TableBarchartUtils.js"],"names":["getMaxValsAttrs","getMinValsAttrs","getLegendValues","excludeKeys","getTotalRowsValsAttr","rowTotals","Object","keys","map","row","filter","includes","x","y","flat","getAbsoluteMin","Math","min","minValsAttrs","getAbsoluteMax","max","maxValsAttrs","vals","totalRowsValsAttr","reduce","obj","val","parseFloat","Number","absoluteMax","absoluteMin","getAdjustedValue","usePercentages","toFixed","steps","stepValue","legendMarkers","Array","slice"],"mappings":"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","file":"TableBarchartUtils.js","sourcesContent":["const excludeKeys = ['push', 'value', 'format', 'numInputs'];\n\nfunction getTotalRowsValsAttr(rowTotals) {\n  return Object.keys(rowTotals)\n    .map(row =>\n      Object.keys(rowTotals[row])\n        .filter(x => !excludeKeys.includes(x))\n        .map(y => rowTotals[row][y])\n    )\n    .flat();\n}\n\nconst getAbsoluteMin = minValsAttrs =>\n  Math.min(...Object.keys(minValsAttrs).map(x => minValsAttrs[x]));\n\nconst getAbsoluteMax = maxValsAttrs =>\n  Math.max(...Object.keys(maxValsAttrs).map(x => maxValsAttrs[x]));\n\n// Function to get the maximum value for each one fhe vals (used to calculate the bar widths).\nexport function getMaxValsAttrs(rowTotals, vals) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  const maxValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.max(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMax = getAbsoluteMax(maxValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMax;\n    return obj;\n  }, {});\n}\n\n// Function to get the minimum value for each one fhe vals (used to calculate the bar widths).\nexport function getMinValsAttrs(rowTotals, vals) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  const minValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.min(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMin;\n    return obj;\n  }, {});\n}\n\nfunction getAdjustedValue(val, usePercentages) {\n  if (usePercentages) {\n    return `${val.toFixed(0)}%`;\n  }\n  return val > 1000 ? `${(val / 1000).toFixed(0)}k` : val.toFixed(0);\n}\n\nexport function getLegendValues(\n  maxValsAttrs,\n  minValsAttrs,\n  steps,\n  usePercentages\n) {\n  const absoluteMin = usePercentages ? 1 : getAbsoluteMin(minValsAttrs);\n  const absoluteMax = usePercentages ? 100 : getAbsoluteMax(maxValsAttrs);\n  const stepValue = (absoluteMax - absoluteMin) / steps;\n  const legendMarkers = [...Array(steps).keys()].map(x =>\n    getAdjustedValue((x + 1) * stepValue, usePercentages)\n  );\n  return ['', ...legendMarkers.slice(0, -1)];\n}\n"]}