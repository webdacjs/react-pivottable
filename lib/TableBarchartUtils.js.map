{"version":3,"sources":["../src/TableBarchartUtils.js"],"names":["getMaxValsAttrs","getMinValsAttrs","excludeKeys","getTotalRowsValsAttr","rowTotals","Object","keys","map","row","filter","includes","x","y","flat","vals","totalRowsValsAttr","maxValsAttrs","reduce","obj","val","Math","max","parseFloat","Number","minValsAttrs","min"],"mappings":";;;;;QAagBA,e,GAAAA,e;QAeAC,e,GAAAA,e;;;;AA5BhB,IAAMC,cAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,WAA5B,CAApB;;AAEA,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AACvC,SAAOC,OAAOC,IAAP,CAAYF,SAAZ,EACJG,GADI,CACA;AAAA,WACHF,OAAOC,IAAP,CAAYF,UAAUI,GAAV,CAAZ,EACGC,MADH,CACU;AAAA,aAAK,CAACP,YAAYQ,QAAZ,CAAqBC,CAArB,CAAN;AAAA,KADV,EAEGJ,GAFH,CAEO;AAAA,aAAKH,UAAUI,GAAV,EAAeI,CAAf,CAAL;AAAA,KAFP,CADG;AAAA,GADA,EAMJC,IANI,EAAP;AAOD;;AAED;AACO,SAASb,eAAT,CAAyBI,SAAzB,EAAoCU,IAApC,EAA0C;AAC/C,MAAMC,oBAAoBZ,qBAAqBC,SAArB,CAA1B;AACA,MAAMY,eAAeF,KAAKG,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7CD,QAAIC,GAAJ,IAAWC,KAAKC,GAAL,gCACNN,kBACAR,GADA,CACI;AAAA,aAAKI,EAAEQ,GAAF,CAAL;AAAA,KADJ,EAEAZ,GAFA,CAEI;AAAA,aAAKe,WAAWX,CAAX,CAAL;AAAA,KAFJ,EAGAF,MAHA,CAGOc,MAHP,CADM,EAAX;AAMA,WAAOL,GAAP;AACD,GARoB,EAQlB,EARkB,CAArB;AASA,SAAOF,YAAP;AACD;;AAED;AACO,SAASf,eAAT,CAAyBG,SAAzB,EAAoCU,IAApC,EAA0C;AAC/C,MAAMC,oBAAoBZ,qBAAqBC,SAArB,CAA1B;AACA,MAAMoB,eAAeV,KAAKG,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7CD,QAAIC,GAAJ,IAAWC,KAAKK,GAAL,gCACNV,kBACAR,GADA,CACI;AAAA,aAAKI,EAAEQ,GAAF,CAAL;AAAA,KADJ,EAEAZ,GAFA,CAEI;AAAA,aAAKe,WAAWX,CAAX,CAAL;AAAA,KAFJ,EAGAF,MAHA,CAGOc,MAHP,CADM,EAAX;AAMA,WAAOL,GAAP;AACD,GARoB,EAQlB,EARkB,CAArB;AASA,SAAOM,YAAP;AACD","file":"TableBarchartUtils.js","sourcesContent":["const excludeKeys = ['push', 'value', 'format', 'numInputs'];\n\nfunction getTotalRowsValsAttr(rowTotals) {\n  return Object.keys(rowTotals)\n    .map(row =>\n      Object.keys(rowTotals[row])\n        .filter(x => !excludeKeys.includes(x))\n        .map(y => rowTotals[row][y])\n    )\n    .flat();\n}\n\n// Function to get the maximum value for each one fhe vals (used to calculate the bar widths).\nexport function getMaxValsAttrs(rowTotals, vals) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  const maxValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.max(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  return maxValsAttrs;\n}\n\n// Function to get the minimum value for each one fhe vals (used to calculate the bar widths).\nexport function getMinValsAttrs(rowTotals, vals) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  const minValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.min(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  return minValsAttrs;\n}\n"]}