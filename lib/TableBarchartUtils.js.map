{"version":3,"sources":["../src/TableBarchartUtils.js"],"names":["getMaxValsAttrs","getMinValsAttrs","getLegendValues","excludeKeys","thousand","getTotalRowsValsAttr","rowTotals","Object","keys","map","row","filter","includes","x","y","flat","getAbsoluteMin","Math","min","minValsAttrs","getAbsoluteMax","max","maxValsAttrs","getSummed","totalRowsValsAttr","reduce","a","b","vals","stacked","obj","val","parseFloat","Number","absoluteMax","absoluteMin","getAdjustedValue","usePercentages","toFixed","steps","stepValue","legendMarkers","Array","slice"],"mappings":"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","file":"TableBarchartUtils.js","sourcesContent":["const excludeKeys = ['push', 'value', 'format', 'numInputs'];\nconst thousand = 1000\n\nfunction getTotalRowsValsAttr(rowTotals) {\n  return Object.keys(rowTotals)\n    .map(row =>\n      Object.keys(rowTotals[row])\n        .filter(x => !excludeKeys.includes(x))\n        .map(y => rowTotals[row][y])\n    )\n    .flat();\n}\n\nconst getAbsoluteMin = minValsAttrs =>\n  Math.min(...Object.keys(minValsAttrs).map(x => minValsAttrs[x]));\n\nconst getAbsoluteMax = maxValsAttrs =>\n  Math.max(...Object.keys(maxValsAttrs).map(x => maxValsAttrs[x]));\n\nconst getSummed = totalRowsValsAttr =>\n  totalRowsValsAttr.map(x =>\n    Object.keys(x)\n      .map(y => x[y])\n      .reduce((a, b) => a + b, 0)\n  );\n\n// Function to get the maximum value for each one fhe vals (used to calculate the bar widths).\nexport function getMaxValsAttrs(rowTotals, vals, stacked) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const max = Math.max(...getSummed(totalRowsValsAttr));\n    return vals.reduce((obj, val) => {\n      obj[val] = max;\n      return obj;\n    }, {});\n  }\n  const maxValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.max(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMax = getAbsoluteMax(maxValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMax;\n    return obj;\n  }, {});\n}\n\n// Function to get the minimum value for each one fhe vals (used to calculate the bar widths).\nexport function getMinValsAttrs(rowTotals, vals, stacked) {\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const min = Math.min(...getSummed(totalRowsValsAttr));\n    return vals.reduce((obj, val) => {\n      obj[val] = min;\n      return obj;\n    }, {});\n  }\n  const minValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.min(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMin;\n    return obj;\n  }, {});\n}\n\nfunction getAdjustedValue(val, usePercentages) {\n  if (usePercentages) {\n    return `${val.toFixed(0)}%`;\n  }\n  return val > thousand ? `${(val / thousand).toFixed(1)}k` : val.toFixed(0);\n}\n\nexport function getLegendValues(\n  maxValsAttrs,\n  minValsAttrs,\n  steps,\n  usePercentages\n) {\n  const absoluteMin = usePercentages ? 1 : getAbsoluteMin(minValsAttrs);\n  const absoluteMax = usePercentages ? 100 : getAbsoluteMax(maxValsAttrs);\n  const stepValue = (absoluteMax - absoluteMin) / steps;\n  const legendMarkers = [...Array(steps).keys()].map(x =>\n    getAdjustedValue((x + 1) * stepValue, usePercentages)\n  );\n  return ['', ...legendMarkers.slice(0, -1)];\n}\n"]}