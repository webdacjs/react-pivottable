{"version":3,"sources":["../src/TableBarchartUtils.js"],"names":["getAbsoluteMax","getMaxValsAttrs","getMinValsAttrs","getLegendValues","getWrapperWidth","excludeKeys","thousand","getTotalRowsValsAttr","rowTotals","Object","keys","map","row","filter","includes","x","y","flat","getAbsoluteMin","Math","min","minValsAttrs","maxValsAttrs","max","getSummed","totalRowsValsAttr","postprocessfn","totalRowsValsProcessed","reduce","a","b","vals","stacked","minVal","obj","val","parseFloat","Number","absoluteMax","maxVal","absoluteMin","getAdjustedValue","usePercentages","nearestFiveVal","ceil","toFixed","steps","realAbsoluteMin","stepValue","legendMarkers","Array","legendValues","slice","width"],"mappings":"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","file":"TableBarchartUtils.js","sourcesContent":["const excludeKeys = ['push', 'value', 'format', 'numInputs'];\nconst thousand = 1000;\n\nfunction getTotalRowsValsAttr(rowTotals) {\n  return Object.keys(rowTotals)\n    .map(row =>\n      Object.keys(rowTotals[row])\n        .filter(x => !excludeKeys.includes(x))\n        .map(y => rowTotals[row][y])\n    )\n    .flat();\n}\n\nconst getAbsoluteMin = minValsAttrs => {\n  return Math.min(...Object.keys(minValsAttrs).map(x => minValsAttrs[x]));\n};\n\nexport function getAbsoluteMax(maxValsAttrs) {\n  return Math.max(...Object.keys(maxValsAttrs).map(x => maxValsAttrs[x]));\n}\n\nconst getSummed = (totalRowsValsAttr, postprocessfn) => {\n  if (postprocessfn) {\n    const totalRowsValsProcessed = totalRowsValsAttr.map(x => postprocessfn(x));\n    return totalRowsValsProcessed.map(x =>\n      Object.keys(x)\n        .map(y => x[y])\n        .reduce((a, b) => a + b, 0)\n    );\n  }\n  return totalRowsValsAttr.map(x =>\n    Object.keys(x)\n      .map(y => x[y])\n      .reduce((a, b) => a + b, 0)\n  );\n};\n\n// Function to get the maximum value for each one fhe vals (used to calculate the bar widths).\nexport function getMaxValsAttrs(\n  rowTotals,\n  vals,\n  stacked,\n  minVal,\n  postprocessfn\n) {\n  if (minVal === 0 || minVal) {\n    return vals.reduce((obj, val) => {\n      obj[val] = minVal;\n      return obj;\n    }, {});\n  }\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const max = Math.max(...getSummed(totalRowsValsAttr, postprocessfn));\n    return vals.reduce((obj, val) => {\n      obj[val] = max;\n      return obj;\n    }, {});\n  }\n  const maxValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.max(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMax = getAbsoluteMax(maxValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMax;\n    return obj;\n  }, {});\n}\n\n// Function to get the minimum value for each one fhe vals (used to calculate the bar widths).\nexport function getMinValsAttrs(\n  rowTotals,\n  vals,\n  stacked,\n  maxVal,\n  postprocessfn\n) {\n  if (maxVal === 0 || maxVal) {\n    return vals.reduce((obj, val) => {\n      obj[val] = maxVal;\n      return obj;\n    }, {});\n  }\n  const totalRowsValsAttr = getTotalRowsValsAttr(rowTotals);\n  if (stacked) {\n    const min = Math.min(...getSummed(totalRowsValsAttr, postprocessfn));\n    return vals.reduce((obj, val) => {\n      obj[val] = min;\n      return obj;\n    }, {});\n  }\n  const minValsAttrs = vals.reduce((obj, val) => {\n    obj[val] = Math.min(\n      ...totalRowsValsAttr\n        .map(x => x[val])\n        .map(x => parseFloat(x))\n        .filter(Number)\n    );\n    return obj;\n  }, {});\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n  return vals.reduce((obj, val) => {\n    obj[val] = absoluteMin;\n    return obj;\n  }, {});\n}\n\nfunction getAdjustedValue(val, usePercentages) {\n  const nearestFiveVal = Math.ceil(val / 5) * 5;\n  if (usePercentages) {\n    return `${nearestFiveVal}%`;\n  }\n  return nearestFiveVal > thousand\n    ? `${(nearestFiveVal / thousand).toFixed(1)}k`\n    : nearestFiveVal.toFixed(0);\n}\n\nexport function getLegendValues(\n  maxValsAttrs,\n  minValsAttrs,\n  steps,\n  usePercentages\n) {\n  const absoluteMin = getAbsoluteMin(minValsAttrs);\n  const absoluteMax = getAbsoluteMax(maxValsAttrs);\n\n  // Dealing with % cases and post process function\n  // where the min === max.\n  const realAbsoluteMin = usePercentages ? 0 : absoluteMin;\n  const stepValue = (absoluteMax - realAbsoluteMin) / steps;\n\n  const legendMarkers = [...Array(steps).keys()].map(x =>\n    getAdjustedValue((x + 1) * stepValue, usePercentages)\n  );\n  // Not showing the first and last element from the legend values.\n  return {\n    legendValues: ['', ...legendMarkers.slice(0, -1)],\n    absoluteMax,\n    absoluteMin,\n  };\n}\n\nexport function getWrapperWidth(usePercentages, absoluteMax) {\n  if (!usePercentages) {\n    return;\n  }\n  if (absoluteMax <= 100) {\n    return;\n  }\n  return {width: (850 / absoluteMax) * 10 + '%'};\n}\n"]}