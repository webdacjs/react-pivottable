{"version":3,"sources":["../src/TableBarchartRenderer.jsx"],"names":["defaultSteps","TableBarchartRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","valsAttrs","vals","multiValue","isMultipe","stacked","showBarValues","showLegend","usePercentages","steps","legendSteps","maxValsAttrs","rowTotals","minValsAttrs","legendValues","rowKeys","getRowKeys","setSelectedRow","setState","prevState","rowid","getRowClassName","getPercentageFromValue","value","key","percValue","getBarValue","percentage","toFixed","getBarChart","index","width","thiskey","minPerc","chartStyle","marginLeft","getCellValue","i","j","rowKey","colKey","aggregator","getAggregator","valuesWithKeys","keys","Object","values","map","k","getTableHeader","length","r","x","marginRight","display","val","getTableBody","txt","React","PureComponent","defaultProps","propTypes","tableOptions","PropTypes","object"],"mappings":"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","file":"TableBarchartRenderer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {getSpanSize} from './TableUtils';\nimport {\n  getMaxValsAttrs,\n  getMinValsAttrs,\n  getLegendValues,\n} from './TableBarchartUtils';\nconst defaultSteps = 15\n\nclass TableBarchartRenderer extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {selectedrow: null};\n  }\n  render() {\n    const pivotData = new PivotData(this.props);\n    const colAttrs = pivotData.props.cols;\n    const rowAttrs = pivotData.props.rows;\n    const valsAttrs = pivotData.props.vals;\n    const multiValue = pivotData.isMultipe;\n    const stacked = this.props.stacked;\n    const showBarValues = this.props.showBarValues;\n    const showLegend = this.props.showLegend;\n    const usePercentages = this.props.usePercentages;\n    const steps = this.props.legendSteps || defaultSteps;\n    const maxValsAttrs = getMaxValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked\n    );\n    const minValsAttrs = getMinValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked\n    );\n\n    const legendValues = getLegendValues(\n      maxValsAttrs,\n      minValsAttrs,\n      steps,\n      usePercentages\n    );\n\n    const rowKeys = pivotData.getRowKeys();\n\n    const setSelectedRow = rowid => {\n      this.setState(prevState => ({\n        selectedrow: prevState.selectedrow === rowid ? null : rowid,\n      }));\n    };\n\n    const getRowClassName = rowid => {\n      if (rowid === this.state.selectedrow) {\n        return 'selected';\n      }\n      return null;\n    };\n\n    function getPercentageFromValue(value, key) {\n      const percValue = (value / maxValsAttrs[key]) * 100;\n      return percValue;\n    }\n\n    function getBarValue(value, percentage) {\n      if (!showBarValues) {\n        return <span className=\"barChartLabel\"></span>;\n      }\n      if (usePercentages) {\n        return (\n          <span className=\"barChartLabel\">{`${percentage.toFixed(1)}%`}</span>\n        );\n      }\n      return <span className=\"barChartLabel\">{value}</span>;\n    }\n\n    function getBarChart(index, width, value, thiskey, stacked) {\n      const minPerc =\n        minValsAttrs[thiskey] > 0\n          ? 0\n          : getPercentageFromValue(minValsAttrs[thiskey], thiskey) * -1;\n      const chartStyle =\n        width > 0\n          ? {width: `${width}%`, marginLeft: `${minPerc}%`}\n          : {width: `${width * -1}%`, marginLeft: `${minPerc - width * -1}%`};\n      return stacked ? (\n        <div className={`bar bar${index + 1}`} style={chartStyle}>\n          {value}\n        </div>\n      ) : (\n        <div className=\"bar-chart-bar\" key={`bar-chart-${index}`}>\n          <div className={`bar bar${index + 1}`} style={chartStyle}>\n            {value}\n          </div>\n        </div>\n      );\n    }\n\n    function getCellValue(i, j, rowKey, colKey) {\n      const aggregator = pivotData.getAggregator(rowKey, colKey);\n      if (!multiValue) {\n        return <td>Aggregator not supported!</td>;\n      }\n      const valuesWithKeys = aggregator.value();\n      const keys = Object.keys(valuesWithKeys);\n      const values = keys.map(k => valuesWithKeys[k]);\n      return (\n        <td className=\"pvtVal pvtValBarChart\" colSpan={steps}>\n          {stacked && (\n            <div className=\"bar-chart-bar\" key={`bar-chart-${i}`}>\n              {values.map((value, i) =>\n                getBarChart(\n                  i,\n                  getPercentageFromValue(value, keys[i]),\n                  getBarValue(value, getPercentageFromValue(value, keys[i])),\n                  keys[i],\n                  stacked\n                )\n              )}\n            </div>\n          )}\n          {!stacked &&\n            values.map((value, i) =>\n              getBarChart(\n                i,\n                getPercentageFromValue(value, keys[i]),\n                getBarValue(value, getPercentageFromValue(value, keys[i])),\n                keys[i],\n                stacked\n              )\n            )}\n        </td>\n      );\n    }\n\n    function getTableHeader() {\n      return (\n        <thead>\n          {rowAttrs.length !== 0 && [\n            <tr>\n              {rowAttrs.map(function(r, i) {\n                return (\n                  <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                    {r}\n                  </th>\n                );\n              })}\n              {colAttrs.length === 0 && multiValue && valsAttrs && (\n                <th\n                  className=\"pvtAttrLabel\"\n                  key=\"attrKeyJoined\"\n                  colSpan={steps}\n                >\n                  {valsAttrs.map((x, i) => (\n                    <span key={`attHead${i}`} style={{marginRight: '2em'}}>\n                      {x}\n                    </span>\n                  ))}\n                </th>\n              )}\n            </tr>,\n            <tr style={{display: showLegend ? 'contents' : 'none'}}>\n              <th colSpan={rowAttrs.length}></th>\n              {legendValues.map(val => (\n                <th>\n                  <span className=\"legendVal\">{val}</span>\n                </th>\n              ))}\n            </tr>,\n          ]}\n        </thead>\n      );\n    }\n\n    function getTableBody() {\n      return (\n        <tbody>\n          {rowKeys.map((rowKey, i) => {\n            return (\n              <tr\n                key={`rowKeyRow${i}`}\n                className={getRowClassName(`rowKeyRow${i}`)}\n                onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n              >\n                {rowKey.map((txt, j) => {\n                  const x = getSpanSize(rowKeys, i, j);\n                  if (x === -1) {\n                    return null;\n                  }\n                  return (\n                    <th\n                      key={`rowKeyLabel${i}-${j}`}\n                      className=\"pvtRowLabel\"\n                      rowSpan={x}\n                      colSpan={\n                        j === rowAttrs.length - 1 && colAttrs.length !== 0\n                          ? 2\n                          : 1\n                      }\n                    >\n                      {txt}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getCellValue(i, 0, rowKey, [])}\n              </tr>\n            );\n          })}\n        </tbody>\n      );\n    }\n\n    return (\n      <table className=\"pvtTable\">\n        {getTableHeader()}\n        {getTableBody()}\n      </table>\n    );\n  }\n}\n\nTableBarchartRenderer.defaultProps = PivotData.defaultProps;\nTableBarchartRenderer.propTypes = PivotData.propTypes;\nTableBarchartRenderer.defaultProps.tableOptions = {};\nTableBarchartRenderer.propTypes.tableOptions = PropTypes.object;\n\nexport default TableBarchartRenderer;\n"]}