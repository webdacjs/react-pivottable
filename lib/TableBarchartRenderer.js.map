{"version":3,"sources":["../src/TableBarchartRenderer.jsx"],"names":["defaultSteps","TableBarchartRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowsLabels","valsAttrs","vals","multiValue","isMultipe","stacked","gauged","postprocessfn","barchartClassNames","showBarValues","showLegend","showPopOver","popOverFormatter","legendFormatter","valsLegend","usePercentages","steps","legendSteps","minVal","maxVal","maxValsAttrs","rowTotals","minValsAttrs","legendValues","absoluteMax","rowKeys","getRowKeys","setSelectedRow","setState","prevState","rowid","getRowClassName","getCellValue","i","j","rowKey","colKey","aggregator","getAggregator","value","valuesWithKeys","keys","Object","values","map","k","originalValues","getTableHeader","length","r","textAlign","x","width","display","val","getTableBody","txt","React","PureComponent","defaultProps","propTypes","tableOptions","PropTypes","object"],"mappings":"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","file":"TableBarchartRenderer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {getSpanSize} from './TableUtils';\nimport BarChartComponent from './BarChartComponent';\nimport BarChartWrapperComponent from './BarChartWrapperComponent';\n\nimport {\n  getMaxValsAttrs,\n  getMinValsAttrs,\n  getLegendValues,\n  getBarClassName,\n} from './TableBarchartUtils';\n\nconst defaultSteps = 15;\n\nclass TableBarchartRenderer extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {selectedrow: null};\n  }\n  render() {\n    const pivotData = new PivotData(this.props);\n    const colAttrs = pivotData.props.cols;\n    const rowAttrs = pivotData.props.rows;\n    const rowsLabels = this.props.rowsLabels;\n    const valsAttrs = pivotData.props.vals;\n    const multiValue = pivotData.isMultipe;\n    const stacked = this.props.stacked;\n    const gauged = this.props.gauged;\n    const postprocessfn = this.props.postprocessfn;\n    const barchartClassNames = this.props.barchartClassNames;\n    const showBarValues = this.props.showBarValues;\n    const showLegend = this.props.showLegend;\n    const showPopOver = this.props.showPopOver;\n    const popOverFormatter = this.props.popOverFormatter;\n    const legendFormatter = this.props.legendFormatter;\n    const valsLegend = this.props.valsLegend;\n    const usePercentages = this.props.usePercentages;\n    const steps = this.props.legendSteps || defaultSteps;\n    const minVal = this.props.minVal;\n    const maxVal = this.props.maxVal;\n\n    // Limits based on the passed props or automatically calculated.\n    const maxValsAttrs = getMaxValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      maxVal,\n      postprocessfn\n    );\n\n    const minValsAttrs = getMinValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      minVal,\n      postprocessfn\n    );\n\n    const {legendValues, absoluteMax} = getLegendValues(\n      maxValsAttrs,\n      minValsAttrs,\n      steps,\n      usePercentages,\n      legendFormatter\n    );\n\n    const rowKeys = pivotData.getRowKeys();\n\n    const setSelectedRow = rowid => {\n      this.setState(prevState => ({\n        selectedrow: prevState.selectedrow === rowid ? null : rowid,\n      }));\n    };\n\n    const getRowClassName = rowid => {\n      if (rowid === this.state.selectedrow) {\n        return 'selected';\n      }\n      return null;\n    };\n\n    function getCellValue(i, j, rowKey, colKey) {\n      const aggregator = pivotData.getAggregator(rowKey, colKey);\n      if (!multiValue) {\n        return <td>Aggregator not supported!</td>;\n      }\n      const value = aggregator.value();\n      const valuesWithKeys = postprocessfn ? postprocessfn(value) : value;\n      const keys = Object.keys(valuesWithKeys);\n      const values = keys.map(k => valuesWithKeys[k]);\n      const originalValues = keys.map(k => value[k]);\n      return (\n        <td className=\"pvtVal pvtValBarChart\" colSpan={steps}>\n          {/* Stacked Bars Case */}\n          {(stacked || gauged) && (\n            <BarChartWrapperComponent\n              key={`wrapper-${i}-${j}`}\n              index={i}\n              barchartClassNames={barchartClassNames}\n              usePercentages={usePercentages}\n              absoluteMax={absoluteMax}\n              stacked={stacked}\n              gauged={gauged}\n            >\n              {values.map((value, i) => (\n                <BarChartComponent\n                  key={`barcharcomponent-${i}-${j}`}\n                  index={i}\n                  value={value}\n                  thiskey={keys[i]}\n                  stacked={stacked}\n                  gauged={gauged}\n                  maxValsAttrs={maxValsAttrs}\n                  minValsAttrs={minValsAttrs}\n                  barchartClassNames={barchartClassNames}\n                  showBarValues={showBarValues}\n                  showPopOver={showPopOver}\n                  popOverFormatter={popOverFormatter}\n                  rowkey={rowKey}\n                  usePercentages={usePercentages}\n                  originalValues={originalValues}\n                  valsAttrs={pivotData.props.vals}\n                  rowAttrs={pivotData.props.rows}\n                />\n              ))}\n            </BarChartWrapperComponent>\n          )}\n          {/* Non-Stacked, Non-Gauged Bars Case */}\n          {!stacked &&\n            !gauged &&\n            values.map((value, i) => (\n              <BarChartComponent\n                key={`${i}-${j}`}\n                index={i}\n                value={value}\n                thiskey={keys[i]}\n                stacked={stacked}\n                maxValsAttrs={maxValsAttrs}\n                minValsAttrs={minValsAttrs}\n                barchartClassNames={barchartClassNames}\n                showBarValues={showBarValues}\n                showPopOver={showPopOver}\n                popOverFormatter={popOverFormatter}\n                rowkey={rowKey}\n                usePercentages={usePercentages}\n                originalValues={originalValues}\n                valsAttrs={pivotData.props.vals}\n                rowAttrs={pivotData.props.rows}\n              />\n            ))}\n        </td>\n      );\n    }\n\n    function getTableHeader() {\n      return (\n        <thead>\n          {rowAttrs.length !== 0 && [\n            <tr>\n              {rowAttrs.map(function(r, i) {\n                return (\n                  <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                    {rowsLabels && rowsLabels[i] ? rowsLabels[i] : r}\n                  </th>\n                );\n              })}\n              {colAttrs.length === 0 && multiValue && valsAttrs && (\n                <th\n                  className=\"pvtAttrLabel\"\n                  key=\"attrKeyJoined\"\n                  colSpan={steps}\n                  style={{textAlign: 'left'}}\n                >\n                  <div className=\"bar-chart-label-wrapper\">\n                    {valsAttrs.map((x, i) => (\n                      <div className=\"bar-chart-bar-label\">\n                        <div\n                          className={getBarClassName(i)}\n                          style={{width: '10px'}}\n                        />\n                        <span\n                          key={`attHead${i}`}\n                          className=\"bar-chart-bar-label-span\"\n                        >\n                          {`${valsLegend && valsLegend[i] ? valsLegend[i] : x}`}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </th>\n              )}\n            </tr>,\n            <tr style={{display: showLegend ? 'contents' : 'none'}}>\n              <th className=\"pvLegendValue\" colSpan={rowAttrs.length}></th>\n              {legendValues.map((val, i) => (\n                <th\n                  className={`pvLegendValue`}\n                  style={{width: `${100 / legendValues.length}%`}}\n                  key={`legend-${i}`}\n                >\n                  <span className=\"legendVal\" key={`legend-val-${i}`}>\n                    {val}\n                  </span>\n                </th>\n              ))}\n            </tr>,\n          ]}\n        </thead>\n      );\n    }\n\n    function getTableBody() {\n      return (\n        <tbody>\n          {rowKeys.map((rowKey, i) => {\n            return (\n              <tr\n                key={`rowKeyRow${i}`}\n                className={getRowClassName(`rowKeyRow${i}`)}\n                onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n              >\n                {rowKey.map((txt, j) => {\n                  const x = getSpanSize(rowKeys, i, j);\n                  if (x === -1) {\n                    return null;\n                  }\n                  return (\n                    <th\n                      key={`rowKeyLabel${i}-${j}`}\n                      className=\"pvtRowLabel\"\n                      rowSpan={x}\n                      colSpan={\n                        j === rowAttrs.length - 1 && colAttrs.length !== 0\n                          ? 2\n                          : 1\n                      }\n                    >\n                      {txt}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getCellValue(i, 0, rowKey, [])}\n              </tr>\n            );\n          })}\n        </tbody>\n      );\n    }\n\n    return (\n      <table className=\"pvtTable\">\n        {getTableHeader()}\n        {getTableBody()}\n      </table>\n    );\n  }\n}\n\nTableBarchartRenderer.defaultProps = PivotData.defaultProps;\nTableBarchartRenderer.propTypes = PivotData.propTypes;\nTableBarchartRenderer.defaultProps.tableOptions = {};\nTableBarchartRenderer.propTypes.tableOptions = PropTypes.object;\n\nexport default TableBarchartRenderer;\n"]}