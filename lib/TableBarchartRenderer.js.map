{"version":3,"sources":["../src/TableBarchartRenderer.jsx"],"names":["TableBarchartRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","valsAttrs","vals","multiValue","isMultipe","showBarValues","maxValsAttrs","rowTotals","minValsAttrs","rowKeys","getRowKeys","setSelectedRow","setState","prevState","rowid","getRowClassName","getPercentageFromValue","value","key","percValue","getBarValue","getBarChart","index","width","thiskey","minPerc","chartStyle","marginLeft","getCellValue","i","j","rowKey","colKey","aggregator","getAggregator","valuesWithKeys","keys","Object","values","map","k","getTableHeader","length","r","x","marginRight","getTableBody","txt","React","PureComponent","defaultProps","propTypes","tableOptions","PropTypes","object"],"mappings":"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","file":"TableBarchartRenderer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {getSpanSize} from './TableUtils';\nimport {getMaxValsAttrs, getMinValsAttrs} from './TableBarchartUtils';\n\nclass TableBarchartRenderer extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {selectedrow: null};\n  }\n  render() {\n    const pivotData = new PivotData(this.props);\n    const colAttrs = pivotData.props.cols;\n    const rowAttrs = pivotData.props.rows;\n    const valsAttrs = pivotData.props.vals;\n    const multiValue = pivotData.isMultipe;\n    const showBarValues = this.props.showBarValues;\n    const maxValsAttrs = getMaxValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals\n    );\n    const minValsAttrs = getMinValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals\n    );\n    const rowKeys = pivotData.getRowKeys();\n\n    const setSelectedRow = rowid => {\n      this.setState(prevState => ({\n        selectedrow: prevState.selectedrow === rowid ? null : rowid,\n      }));\n    };\n\n    const getRowClassName = rowid => {\n      if (rowid === this.state.selectedrow) {\n        return 'selected';\n      }\n      return null;\n    };\n\n    function getPercentageFromValue(value, key) {\n      const percValue = (value / maxValsAttrs[key]) * 100;\n      return percValue;\n    }\n\n    function getBarValue(value) {\n      if (!showBarValues) {\n        return <span className=\"barChartLabel\"></span>;\n      }\n      return <span className=\"barChartLabel\">{value}</span>;\n    }\n\n    function getBarChart(index, width, value, thiskey) {\n      const minPerc =\n        minValsAttrs[thiskey] > 0\n          ? 0\n          : getPercentageFromValue(minValsAttrs[thiskey], thiskey) * -1;\n      const chartStyle =\n        width > 0\n          ? {width: `${width}%`, marginLeft: `${minPerc}%`}\n          : {width: `${width * -1}%`, marginLeft: `${minPerc - width * -1}%`};\n      return (\n        <div className=\"bar-chart-bar\" key={`bar-chart-${index}`}>\n          <div className={`bar bar${index + 1}`} style={chartStyle}>\n            {value}\n          </div>\n        </div>\n      );\n    }\n\n    function getCellValue(i, j, rowKey, colKey) {\n      const aggregator = pivotData.getAggregator(rowKey, colKey);\n      if (!multiValue) {\n        return <td>Aggregator not supported!</td>;\n      }\n      const valuesWithKeys = aggregator.value();\n      const keys = Object.keys(valuesWithKeys);\n      const values = keys.map(k => valuesWithKeys[k]);\n      return (\n        <td className=\"pvtVal pvtValBarChart\">\n          {values.map((value, i) =>\n            getBarChart(\n              i,\n              getPercentageFromValue(value, keys[i]),\n              getBarValue(value),\n              keys[i]\n            )\n          )}\n        </td>\n      );\n    }\n\n    function getTableHeader() {\n      return (\n        <thead>\n          {rowAttrs.length !== 0 && (\n            <tr>\n              {rowAttrs.map(function(r, i) {\n                return (\n                  <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                    {r}\n                  </th>\n                );\n              })}\n              {colAttrs.length === 0 && multiValue && valsAttrs && (\n                <th className=\"pvtAttrLabel\" key=\"attrKeyJoined\">\n                  {valsAttrs.map((x, i) => (\n                    <span key={`attHead${i}`} style={{marginRight: '2em'}}>\n                      {x}\n                    </span>\n                  ))}\n                </th>\n              )}\n            </tr>\n          )}\n        </thead>\n      );\n    }\n\n    function getTableBody() {\n      return (\n        <tbody>\n          {rowKeys.map((rowKey, i) => {\n            return (\n              <tr\n                key={`rowKeyRow${i}`}\n                className={getRowClassName(`rowKeyRow${i}`)}\n                onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n              >\n                {rowKey.map((txt, j) => {\n                  const x = getSpanSize(rowKeys, i, j);\n                  if (x === -1) {\n                    return null;\n                  }\n                  return (\n                    <th\n                      key={`rowKeyLabel${i}-${j}`}\n                      className=\"pvtRowLabel\"\n                      rowSpan={x}\n                      colSpan={\n                        j === rowAttrs.length - 1 && colAttrs.length !== 0\n                          ? 2\n                          : 1\n                      }\n                    >\n                      {txt}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getCellValue(i, 0, rowKey, [])}\n              </tr>\n            );\n          })}\n        </tbody>\n      );\n    }\n\n    return (\n      <table className=\"pvtTable\">\n        {getTableHeader()}\n        {getTableBody()}\n      </table>\n    );\n  }\n}\n\nTableBarchartRenderer.defaultProps = PivotData.defaultProps;\nTableBarchartRenderer.propTypes = PivotData.propTypes;\nTableBarchartRenderer.defaultProps.tableOptions = {};\nTableBarchartRenderer.propTypes.tableOptions = PropTypes.object;\n\nexport default TableBarchartRenderer;\n"]}