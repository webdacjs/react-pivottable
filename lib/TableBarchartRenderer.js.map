{"version":3,"sources":["../src/TableBarchartRenderer.jsx"],"names":["defaultSteps","TableBarchartRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowsLabels","valsAttrs","vals","multiValue","isMultipe","stacked","postprocessfn","barchartClassNames","showBarValues","showLegend","showPopOver","valsLegend","usePercentages","steps","legendSteps","minVal","maxVal","maxValsAttrs","rowTotals","minValsAttrs","legendValues","rowKeys","getRowKeys","setSelectedRow","setState","prevState","rowid","getRowClassName","getBarWrapperClassName","wrapper","getBarClassName","bars","index","getCellValue","i","j","rowKey","colKey","aggregator","getAggregator","value","valuesWithKeys","keys","Object","values","map","k","getTableHeader","length","r","textAlign","x","width","display","val","getTableBody","txt","React","PureComponent","defaultProps","propTypes","tableOptions","PropTypes","object"],"mappings":"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","file":"TableBarchartRenderer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {getSpanSize} from './TableUtils';\nimport BarChartComponent from './BarChartComponent';\n\nimport {\n  getMaxValsAttrs,\n  getMinValsAttrs,\n  getLegendValues,\n} from './TableBarchartUtils';\n\nconst defaultSteps = 15;\n\nclass TableBarchartRenderer extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {selectedrow: null};\n  }\n  render() {\n    const pivotData = new PivotData(this.props);\n    const colAttrs = pivotData.props.cols;\n    const rowAttrs = pivotData.props.rows;\n    const rowsLabels = this.props.rowsLabels;\n    const valsAttrs = pivotData.props.vals;\n    const multiValue = pivotData.isMultipe;\n    const stacked = this.props.stacked;\n    const postprocessfn = this.props.postprocessfn;\n    const barchartClassNames = this.props.barchartClassNames;\n    const showBarValues = this.props.showBarValues;\n    const showLegend = this.props.showLegend;\n    const showPopOver = this.props.showPopOver;\n    const valsLegend = this.props.valsLegend;\n    const usePercentages = this.props.usePercentages;\n    const steps = this.props.legendSteps || defaultSteps;\n    const minVal = this.props.minVal;\n    const maxVal = this.props.maxVal;\n\n    // Limits based on the passed props or automatically calculated.\n    const maxValsAttrs = getMaxValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      maxVal\n    );\n    const minValsAttrs = getMinValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      minVal\n    );\n\n    const legendValues = getLegendValues(\n      maxValsAttrs,\n      minValsAttrs,\n      steps,\n      usePercentages\n    );\n\n    const rowKeys = pivotData.getRowKeys();\n\n    const setSelectedRow = rowid => {\n      this.setState(prevState => ({\n        selectedrow: prevState.selectedrow === rowid ? null : rowid,\n      }));\n    };\n\n    const getRowClassName = rowid => {\n      if (rowid === this.state.selectedrow) {\n        return 'selected';\n      }\n      return null;\n    };\n\n    const getBarWrapperClassName = () => {\n      if (barchartClassNames && barchartClassNames.wrapper) {\n        return barchartClassNames.wrapper;\n      }\n      return 'bar-chart-bar';\n    };\n\n    const getBarClassName = index => {\n      if (\n        barchartClassNames &&\n        barchartClassNames.bars &&\n        barchartClassNames.bars[index]\n      ) {\n        return barchartClassNames.bars[index];\n      }\n      return `bar bar${index + 1}`;\n    };\n\n    function getCellValue(i, j, rowKey, colKey) {\n      const aggregator = pivotData.getAggregator(rowKey, colKey);\n      if (!multiValue) {\n        return <td>Aggregator not supported!</td>;\n      }\n      const value = aggregator.value();\n      const valuesWithKeys = postprocessfn ? postprocessfn(value) : value;\n      const keys = Object.keys(valuesWithKeys);\n      const values = keys.map(k => valuesWithKeys[k]);\n      return (\n        <td className=\"pvtVal pvtValBarChart\" colSpan={steps}>\n          {stacked && (\n            <div className={getBarWrapperClassName()} key={`bar-chart-${i}`}>\n              {values.map((value, i) => (\n                <BarChartComponent\n                  key={`${i}-${j}`}\n                  index={i}\n                  value={value}\n                  thiskey={keys[i]}\n                  stacked={stacked}\n                  maxValsAttrs={maxValsAttrs}\n                  minValsAttrs={minValsAttrs}\n                  barchartClassNames={minValsAttrs}\n                  showBarValues={showBarValues}\n                  showPopOver={showPopOver}\n                  rowkey={rowKey}\n                  colkey={colKey}\n                  values={values}\n                  valsAttrs={pivotData.props.vals}\n                  rowAttrs={pivotData.props.rows}\n                />\n              ))}\n            </div>\n          )}\n          {!stacked &&\n            values.map((value, i) => (\n              <BarChartComponent\n                key={`${i}-${j}`}\n                index={i}\n                value={value}\n                thiskey={keys[i]}\n                stacked={stacked}\n                maxValsAttrs={maxValsAttrs}\n                minValsAttrs={minValsAttrs}\n                barchartClassNames={minValsAttrs}\n                showBarValues={showBarValues}\n                showPopOver={showPopOver}\n                rowkey={rowKey}\n                colkey={colKey}\n                values={values}\n                valsAttrs={pivotData.props.vals}\n                rowAttrs={pivotData.props.rows}\n              />\n            ))}\n        </td>\n      );\n    }\n\n    function getTableHeader() {\n      return (\n        <thead>\n          {rowAttrs.length !== 0 && [\n            <tr>\n              {rowAttrs.map(function(r, i) {\n                return (\n                  <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                    {rowsLabels && rowsLabels[i] ? rowsLabels[i] : r}\n                  </th>\n                );\n              })}\n              {colAttrs.length === 0 && multiValue && valsAttrs && (\n                <th\n                  className=\"pvtAttrLabel\"\n                  key=\"attrKeyJoined\"\n                  colSpan={steps}\n                  style={{textAlign: 'left'}}\n                >\n                  <div className=\"bar-chart-label-wrapper\">\n                    {valsAttrs.map((x, i) => (\n                      <div className=\"bar-chart-bar-label\">\n                        <div\n                          className={getBarClassName(i)}\n                          style={{width: '10px'}}\n                        />\n                        <span\n                          key={`attHead${i}`}\n                          className=\"bar-chart-bar-label-span\"\n                        >\n                          {`${valsLegend && valsLegend[i] ? valsLegend[i] : x}`}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </th>\n              )}\n            </tr>,\n            <tr style={{display: showLegend ? 'contents' : 'none'}}>\n              <th className=\"pvLegendValue\" colSpan={rowAttrs.length}></th>\n              {legendValues.map((val, i) => (\n                <th className=\"pvLegendValue\" key={`legend-${i}`}>\n                  <span className=\"legendVal\" key={`legend-val-${i}`}>\n                    {val}\n                  </span>\n                </th>\n              ))}\n            </tr>,\n          ]}\n        </thead>\n      );\n    }\n\n    function getTableBody() {\n      return (\n        <tbody>\n          {rowKeys.map((rowKey, i) => {\n            return (\n              <tr\n                key={`rowKeyRow${i}`}\n                className={getRowClassName(`rowKeyRow${i}`)}\n                onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n              >\n                {rowKey.map((txt, j) => {\n                  const x = getSpanSize(rowKeys, i, j);\n                  if (x === -1) {\n                    return null;\n                  }\n                  return (\n                    <th\n                      key={`rowKeyLabel${i}-${j}`}\n                      className=\"pvtRowLabel\"\n                      rowSpan={x}\n                      colSpan={\n                        j === rowAttrs.length - 1 && colAttrs.length !== 0\n                          ? 2\n                          : 1\n                      }\n                    >\n                      {txt}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getCellValue(i, 0, rowKey, [])}\n              </tr>\n            );\n          })}\n        </tbody>\n      );\n    }\n\n    return (\n      <table className=\"pvtTable\">\n        {getTableHeader()}\n        {getTableBody()}\n      </table>\n    );\n  }\n}\n\nTableBarchartRenderer.defaultProps = PivotData.defaultProps;\nTableBarchartRenderer.propTypes = PivotData.propTypes;\nTableBarchartRenderer.defaultProps.tableOptions = {};\nTableBarchartRenderer.propTypes.tableOptions = PropTypes.object;\n\nexport default TableBarchartRenderer;\n"]}