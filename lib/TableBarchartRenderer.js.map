{"version":3,"sources":["../src/TableBarchartRenderer.jsx"],"names":["defaultSteps","TableBarchartRenderer","state","selectedrow","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowsLabels","valsAttrs","vals","multiValue","isMultipe","stacked","gauged","d3BuilderConcurrency","postprocessfn","barchartClassNames","barColors","barHeight","showBarValues","showLegend","showPopOver","popOverFormatter","legendFormatter","valsLegend","usePercentages","steps","legendSteps","minVal","maxVal","maxValsAttrs","rowTotals","minValsAttrs","legendValues","absoluteMax","rowKeys","getRowKeys","setSelectedRow","setState","prevState","rowid","getRowClassName","getCellValue","i","j","rowKey","colKey","aggregator","getAggregator","value","valuesWithKeys","keys","Object","values","map","k","originalValues","buildD3BarChartBuilder","getTableHeader","length","r","textAlign","x","width","display","val","getTableBody","txt","React","PureComponent","defaultProps","propTypes","tableOptions","PropTypes","object"],"mappings":"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","file":"TableBarchartRenderer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\nimport {getSpanSize} from './TableUtils';\nimport BarChartComponent from './BarChartComponent';\nimport BarChartWrapperComponent from './BarChartWrapperComponent';\nimport GaugeChartComponent from './GaugeChartComponent';\nimport D3HeaderComponent from './D3HeaderComponent';\nimport PopOverComponent from './PopOverComponent';\nimport {\n  buildD3BarChartBuilder,\n  setD3BuilderConcurrency,\n} from './buildD3BarChartBuilder';\n\nimport {\n  getMaxValsAttrs,\n  getMinValsAttrs,\n  getLegendValues,\n  getBarClassName,\n} from './TableBarchartUtils';\n\nconst defaultSteps = 15;\n\nclass TableBarchartRenderer extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {selectedrow: null};\n  }\n  render() {\n    const pivotData = new PivotData(this.props);\n    const colAttrs = pivotData.props.cols;\n    const rowAttrs = pivotData.props.rows;\n    const rowsLabels = this.props.rowsLabels;\n    const valsAttrs = pivotData.props.vals;\n    const multiValue = pivotData.isMultipe;\n    const stacked = this.props.stacked;\n    const gauged = this.props.gauged;\n    const d3BuilderConcurrency = this.props.d3BuilderConcurrency;\n    const postprocessfn = this.props.postprocessfn;\n    const barchartClassNames = this.props.barchartClassNames;\n    const barColors = this.props.barColors;\n    const barHeight = this.props.barHeight;\n    const showBarValues = this.props.showBarValues;\n    const showLegend = this.props.showLegend;\n    const showPopOver = this.props.showPopOver;\n    const popOverFormatter = this.props.popOverFormatter;\n    const legendFormatter = this.props.legendFormatter;\n    const valsLegend = this.props.valsLegend;\n    const usePercentages = this.props.usePercentages;\n    const steps = this.props.legendSteps || defaultSteps;\n    const minVal = this.props.minVal;\n    const maxVal = this.props.maxVal;\n\n    // Limits based on the passed props or automatically calculated.\n    const maxValsAttrs = getMaxValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      maxVal,\n      postprocessfn\n    );\n\n    const minValsAttrs = getMinValsAttrs(\n      pivotData.rowTotals,\n      pivotData.props.vals,\n      stacked,\n      minVal,\n      postprocessfn\n    );\n\n    const {legendValues, absoluteMax} = getLegendValues(\n      maxValsAttrs,\n      minValsAttrs,\n      steps,\n      usePercentages,\n      legendFormatter\n    );\n\n    if (d3BuilderConcurrency) {\n      setD3BuilderConcurrency(d3BuilderConcurrency);\n    }\n\n    const rowKeys = pivotData.getRowKeys();\n\n    const setSelectedRow = rowid => {\n      this.setState(prevState => ({\n        selectedrow: prevState.selectedrow === rowid ? null : rowid,\n      }));\n    };\n\n    const getRowClassName = rowid => {\n      if (rowid === this.state.selectedrow) {\n        return 'selected';\n      }\n      return null;\n    };\n\n    function getCellValue(i, j, rowKey, colKey) {\n      const aggregator = pivotData.getAggregator(rowKey, colKey);\n      if (!multiValue) {\n        return <td>Aggregator not supported!</td>;\n      }\n      const value = aggregator.value();\n      const valuesWithKeys = postprocessfn ? postprocessfn(value) : value;\n      const keys = Object.keys(valuesWithKeys);\n      const values = keys.map(k => valuesWithKeys[k]);\n      const originalValues = keys.map(k => value[k]);\n\n      return (\n        <td className=\"pvtVal pvtValBarChart\" colSpan={steps}>\n          {/* Gauged Bars Case */}\n          {!stacked && gauged && (\n            <BarChartWrapperComponent\n              key={`wrapper-${i}-${j}`}\n              index={i}\n              barchartClassNames={barchartClassNames}\n              gauged={gauged}\n            >\n              <PopOverComponent\n                showPopOver={showPopOver}\n                popOverFormatter={popOverFormatter}\n                rowkey={rowKey}\n                originalValues={originalValues}\n                valsAttrs={pivotData.props.vals}\n                rowAttrs={pivotData.props.rows}\n              >\n                <GaugeChartComponent\n                  dataElement={valuesWithKeys}\n                  maxValue={absoluteMax}\n                  minValue={0}\n                  dimensions={valsAttrs}\n                  colors={barColors}\n                  height={barHeight || 15}\n                  usePercentages={usePercentages}\n                  showBarValues={showBarValues}\n                  buildD3BarChartBuilder={buildD3BarChartBuilder}\n                />\n              </PopOverComponent>\n            </BarChartWrapperComponent>\n          )}\n          {/* Stacked Bars Case */}\n          {stacked && !gauged && (\n            <BarChartWrapperComponent\n              key={`wrapper-${i}-${j}`}\n              index={i}\n              barchartClassNames={barchartClassNames}\n              usePercentages={usePercentages}\n              absoluteMax={absoluteMax}\n              stacked={stacked}\n              gauged={gauged}\n            >\n              {values.map((value, i) => (\n                <BarChartComponent\n                  key={`barcharcomponent-${i}-${j}`}\n                  index={i}\n                  value={value}\n                  thiskey={keys[i]}\n                  stacked={stacked}\n                  gauged={gauged}\n                  maxValsAttrs={maxValsAttrs}\n                  minValsAttrs={minValsAttrs}\n                  barchartClassNames={barchartClassNames}\n                  showBarValues={showBarValues}\n                  showPopOver={showPopOver}\n                  popOverFormatter={popOverFormatter}\n                  rowkey={rowKey}\n                  usePercentages={usePercentages}\n                  originalValues={originalValues}\n                  valsAttrs={pivotData.props.vals}\n                  rowAttrs={pivotData.props.rows}\n                />\n              ))}\n            </BarChartWrapperComponent>\n          )}\n          {/* Non-Stacked, Non-Gauged Bars Case */}\n          {!stacked &&\n            !gauged &&\n            values.map((value, i) => (\n              <BarChartComponent\n                key={`${i}-${j}`}\n                index={i}\n                value={value}\n                thiskey={keys[i]}\n                stacked={stacked}\n                maxValsAttrs={maxValsAttrs}\n                minValsAttrs={minValsAttrs}\n                barchartClassNames={barchartClassNames}\n                showBarValues={showBarValues}\n                showPopOver={showPopOver}\n                popOverFormatter={popOverFormatter}\n                rowkey={rowKey}\n                usePercentages={usePercentages}\n                originalValues={originalValues}\n                valsAttrs={pivotData.props.vals}\n                rowAttrs={pivotData.props.rows}\n              />\n            ))}\n        </td>\n      );\n    }\n\n    function getTableHeader() {\n      return (\n        <thead>\n          {rowAttrs.length !== 0 && [\n            <tr>\n              {rowAttrs.map(function(r, i) {\n                return (\n                  <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                    {rowsLabels && rowsLabels[i] ? rowsLabels[i] : r}\n                  </th>\n                );\n              })}\n              {colAttrs.length === 0 && multiValue && valsAttrs && (\n                <th\n                  className=\"pvtAttrLabel\"\n                  key=\"attrKeyJoined\"\n                  colSpan={steps}\n                  style={{textAlign: 'left'}}\n                >\n                  <div className=\"bar-chart-label-wrapper\">\n                    {valsAttrs.map((x, i) => (\n                      <div className=\"bar-chart-bar-label\">\n                        <div\n                          className={getBarClassName(i)}\n                          style={{width: '10px'}}\n                        />\n                        <span\n                          key={`attHead${i}`}\n                          className=\"bar-chart-bar-label-span\"\n                        >\n                          {`${valsLegend && valsLegend[i] ? valsLegend[i] : x}`}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </th>\n              )}\n            </tr>,\n            <tr style={{display: showLegend ? 'contents' : 'none'}}>\n              <th className=\"pvLegendValue\" colSpan={rowAttrs.length}></th>\n              {gauged && (\n                <th className=\"pvLegendValue\" colSpan={legendValues.length}>\n                  <D3HeaderComponent\n                    legendValues={legendValues}\n                    usePercentages={usePercentages}\n                    height={barHeight || 15}\n                    buildD3BarChartBuilder={buildD3BarChartBuilder}\n                  />\n                </th>\n              )}\n              {!gauged &&\n                legendValues.map((val, i) => (\n                  <th\n                    className={`pvLegendValue`}\n                    style={{width: `${100 / legendValues.length}%`}}\n                    key={`legend-${i}`}\n                  >\n                    <span className=\"legendVal\" key={`legend-val-${i}`}>\n                      {val}\n                    </span>\n                  </th>\n                ))}\n            </tr>,\n          ]}\n        </thead>\n      );\n    }\n\n    function getTableBody() {\n      return (\n        <tbody>\n          {rowKeys.map((rowKey, i) => {\n            return (\n              <tr\n                key={`rowKeyRow${i}`}\n                className={getRowClassName(`rowKeyRow${i}`)}\n                onClick={() => setSelectedRow(`rowKeyRow${i}`)}\n              >\n                {rowKey.map((txt, j) => {\n                  const x = getSpanSize(rowKeys, i, j);\n                  if (x === -1) {\n                    return null;\n                  }\n                  return (\n                    <th\n                      key={`rowKeyLabel${i}-${j}`}\n                      className=\"pvtRowLabel\"\n                      rowSpan={x}\n                      colSpan={\n                        j === rowAttrs.length - 1 && colAttrs.length !== 0\n                          ? 2\n                          : 1\n                      }\n                    >\n                      {txt}\n                    </th>\n                  );\n                })}\n                {colAttrs.length === 0 &&\n                  multiValue &&\n                  valsAttrs &&\n                  getCellValue(i, 0, rowKey, [])}\n              </tr>\n            );\n          })}\n        </tbody>\n      );\n    }\n\n    return (\n      <table className=\"pvtTable\">\n        {getTableHeader()}\n        {getTableBody()}\n      </table>\n    );\n  }\n}\n\nTableBarchartRenderer.defaultProps = PivotData.defaultProps;\nTableBarchartRenderer.propTypes = PivotData.propTypes;\nTableBarchartRenderer.defaultProps.tableOptions = {};\nTableBarchartRenderer.propTypes.tableOptions = PropTypes.object;\n\nexport default TableBarchartRenderer;\n"]}