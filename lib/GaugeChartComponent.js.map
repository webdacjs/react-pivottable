{"version":3,"sources":["../src/GaugeChartComponent.js"],"names":["GaugeChartComponent","dataElement","maxValue","minValue","viewPortWidth","dimensions","colors","height","showBarValues","usePercentages","suffix","randomColor","Math","floor","random","toString","getWidth","val","values","map","x","getAdustedX","includes","abs","chartHeight","yOffset","innerheight","chartColors","builtDataObject","i","dimension","y","text","round","width","color","widths","builtDataObjectWithX","item","index","Object","assign","slice","reduce","a","b","ref","svg","selectAll","data","enter","append","attr","d","length","marginTop","marginRight","marginLeft"],"mappings":"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","file":"GaugeChartComponent.js","sourcesContent":["import React from 'react';\nimport {useD3} from './d3hook.js';\n\nfunction GaugeChartComponent({\n  dataElement,\n  maxValue,\n  minValue,\n  viewPortWidth,\n  dimensions,\n  colors,\n  height,\n  showBarValues,\n  usePercentages,\n}) {\n  const suffix = usePercentages ? '%' : '';\n\n  const randomColor = () => Math.floor(Math.random() * 16777215).toString(16);\n\n  const getWidth = val => (val * viewPortWidth) / maxValue;\n\n  const values = dimensions.map(x => dataElement[x]);\n\n  function getAdustedX(val) {\n    if (!minValue || minValue > 0) {\n      return val;\n    }\n    if (values.includes(minValue)) {\n      return val;\n    }\n    return val + Math.abs(minValue);\n  }\n\n  const chartHeight = height || 30;\n  const yOffset = chartHeight / 3 / 2.3;\n  const innerheight = (chartHeight / 3) * 2;\n\n  const chartColors = colors || ['#4e79a7', '#e05759', '#f28e2c'];\n  const builtDataObject = dimensions.map((x, i) => ({\n    dimension: x,\n    y: i === 0 ? 0 : yOffset,\n    text: `${Math.round(dataElement[x])}${suffix}`,\n    width: Math.abs(getWidth(dataElement[x])),\n    height: i === 0 ? chartHeight : innerheight,\n    color: chartColors[i] || randomColor(),\n  }));\n  const widths = builtDataObject.map(x => x.width);\n  const builtDataObjectWithX = builtDataObject.map((item, index) =>\n    Object.assign(item, {\n      x:\n        index <= 1\n          ? getAdustedX(0, item)\n          : getAdustedX(\n              widths.slice(1, index).reduce((a, b) => a + b, 0),\n              item\n            ),\n    })\n  );\n\n  const ref = useD3(\n    svg => {\n      svg\n        .selectAll('rect')\n        .data(builtDataObjectWithX)\n        .enter()\n        .append('rect')\n        .attr('width', d => d.width)\n        .attr('x', d => d.x)\n        .attr('fill', d => d.color)\n        .attr('y', d => d.y)\n        .attr('height', d => d.height);\n\n      if (showBarValues) {\n        svg\n          .selectAll('text')\n          .data(builtDataObjectWithX)\n          .enter()\n          .append('text')\n          .text(d => d.text)\n          .attr('text-anchor', 'middle')\n          .attr('x', d => d.width - (d.text.length + 15))\n          .attr('y', d => d.y + 10)\n          .attr('font-size', '11px')\n          .attr('fill', 'white');\n      }\n    },\n    [dataElement]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: chartHeight,\n        width: '100%',\n        marginTop: '0px',\n        marginRight: '0px',\n        marginLeft: '0px',\n      }}\n    ></svg>\n  );\n}\n\nexport default GaugeChartComponent;\n"]}