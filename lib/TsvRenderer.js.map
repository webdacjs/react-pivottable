{"version":3,"sources":["../src/TsvRenderer.jsx"],"names":["TSVExportRenderer","pivotData","PivotData","props","rowKeys","getRowKeys","colKeys","getColKeys","length","push","headerRow","rows","map","r","aggregatorName","c","join","result","row","x","v","getAggregator","value","unshift","width","window","innerWidth","height","innerHeight","React","PureComponent","defaultProps","propTypes"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEMA,iB;;;;;;;;;;;6BACK;AACP,UAAMC,YAAY,IAAIC,oBAAJ,CAAc,KAAKC,KAAnB,CAAlB;AACA,UAAMC,UAAUH,UAAUI,UAAV,EAAhB;AACA,UAAMC,UAAUL,UAAUM,UAAV,EAAhB;AACA,UAAIH,QAAQI,MAAR,KAAmB,CAAvB,EAA0B;AACxBJ,gBAAQK,IAAR,CAAa,EAAb;AACD;AACD,UAAIH,QAAQE,MAAR,KAAmB,CAAvB,EAA0B;AACxBF,gBAAQG,IAAR,CAAa,EAAb;AACD;;AAED,UAAMC,YAAYT,UAAUE,KAAV,CAAgBQ,IAAhB,CAAqBC,GAArB,CAAyB;AAAA,eAAKC,CAAL;AAAA,OAAzB,CAAlB;AACA,UAAIP,QAAQE,MAAR,KAAmB,CAAnB,IAAwBF,QAAQ,CAAR,EAAWE,MAAX,KAAsB,CAAlD,EAAqD;AACnDE,kBAAUD,IAAV,CAAe,KAAKN,KAAL,CAAWW,cAA1B;AACD,OAFD,MAEO;AACLR,gBAAQM,GAAR,CAAY;AAAA,iBAAKF,UAAUD,IAAV,CAAeM,EAAEC,IAAF,CAAO,GAAP,CAAf,CAAL;AAAA,SAAZ;AACD;;AAED,UAAMC,SAASb,QAAQQ,GAAR,CAAY,aAAK;AAC9B,YAAMM,MAAML,EAAED,GAAF,CAAM;AAAA,iBAAKO,CAAL;AAAA,SAAN,CAAZ;AACAb,gBAAQM,GAAR,CAAY,aAAK;AACf,cAAMQ,IAAInB,UAAUoB,aAAV,CAAwBR,CAAxB,EAA2BE,CAA3B,EAA8BO,KAA9B,EAAV;AACAJ,cAAIT,IAAJ,CAASW,IAAIA,CAAJ,GAAQ,EAAjB;AACD,SAHD;AAIA,eAAOF,GAAP;AACD,OAPc,CAAf;;AASAD,aAAOM,OAAP,CAAeb,SAAf;;AAEA,aACE;AACE,eAAOO,OAAOL,GAAP,CAAW;AAAA,iBAAKC,EAAEG,IAAF,CAAO,IAAP,CAAL;AAAA,SAAX,EAA8BA,IAA9B,CAAmC,IAAnC,CADT;AAEE,eAAO,EAACQ,OAAOC,OAAOC,UAAP,GAAoB,CAA5B,EAA+BC,QAAQF,OAAOG,WAAP,GAAqB,CAA5D,EAFT;AAGE,kBAAU;AAHZ,QADF;AAOD;;;;EArC6BC,gBAAMC,a;;AAwCtC9B,kBAAkB+B,YAAlB,GAAiC7B,qBAAU6B,YAA3C;AACA/B,kBAAkBgC,SAAlB,GAA8B9B,qBAAU8B,SAAxC;;kBAEehC,iB","file":"TsvRenderer.js","sourcesContent":["import React from 'react';\nimport {PivotData} from './Utilities';\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default TSVExportRenderer;\n"]}